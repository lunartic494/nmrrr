export interface PromptGroup {
  id: string;
  name: string;
  promptIds: string[];
  subGroups: PromptGroup[];
  collapsed: boolean;
  level: number;
  parentId?: string;
}

// 分组数据存储键名（基于预设名称）
function getGroupingStorageKey(presetName: string): string {
  return `miaomiao_preset_groups_${presetName}`;
}

// 获取预设的分组配置
function getPresetGrouping(presetName: string): PromptGroup[] {
  try {
    const stored = localStorage.getItem(getGroupingStorageKey(presetName));
    return stored ? JSON.parse(stored) : [];
  } catch (error) {
    console.error('获取分组配置失败:', error);
    return [];
  }
}

// 保存预设的分组配置
function savePresetGrouping(presetName: string, groups: PromptGroup[]): void {
  try {
    localStorage.setItem(getGroupingStorageKey(presetName), JSON.stringify(groups));
  } catch (error) {
    console.error('保存分组配置失败:', error);
  }
}

// 缓存DOM查询结果
let cachedPromptElements: JQuery | null = null;
let lastPromptQueryTime = 0;
const PROMPT_CACHE_DURATION = 3000; // 3秒缓存

// 获取当前预设的所有条目
export function getCurrentPresetPrompts(): Array<{ id: string; name: string; element: JQuery; enabled: boolean }> {
  const prompts: Array<{ id: string; name: string; element: JQuery; enabled: boolean }> = [];

  // 检查缓存是否有效
  const now = Date.now();
  if (!cachedPromptElements || now - lastPromptQueryTime > PROMPT_CACHE_DURATION) {
    cachedPromptElements = $('.completion_prompt_manager_prompt');
    lastPromptQueryTime = now;
  }

  const promptElements = cachedPromptElements;

  promptElements.each(function () {
    const element = $(this);
    const id = element.data('pm-identifier') || element.find('[data-pm-identifier]').data('pm-identifier');

    if (!id) return; // 早期跳出，避免不必要的DOM查询

    const nameElement = element.find('.completion_prompt_manager_prompt_name');
    const name = nameElement.find('a').text().trim() || nameElement.text().trim();

    if (!name) return; // 早期跳出

    const isEnabled = element.find('.prompt-manager-toggle-action').hasClass('fa-toggle-on');

    prompts.push({
      id: id,
      name: name,
      element: element,
      enabled: isEnabled,
    });
  });

  return prompts;
}

// 全局标记，防止重复绑定事件
let groupingEventsBound = false;

// 显示条目分组界面
export async function showPromptGroupingUI(): Promise<void> {
  const popupId = 'preset-manager-grouping-popup';
  $(`#${popupId}`).remove();

  const prompts = getCurrentPresetPrompts();
  if (prompts.length === 0) {
    toastr.warning('当前预设没有可分组的条目。');
    return;
  }

  // 获取当前预设的分组信息
  const currentPresetName = TavernHelper.getLoadedPresetName();
  const existingGroups = getPresetGrouping(currentPresetName);

  // 递归查找条目所在的分组路径
  function findPromptGroupPath(promptId: string, groups: PromptGroup[], parentPath: string = ''): string | null {
    for (const group of groups) {
      // 检查是否在直接条目中
      if (group.promptIds.includes(promptId)) {
        return parentPath ? `${parentPath}/${group.name}` : group.name;
      }

      // 递归检查子分组
      if (group.subGroups.length > 0) {
        const subPath = findPromptGroupPath(
          promptId,
          group.subGroups,
          parentPath ? `${parentPath}/${group.name}` : group.name,
        );
        if (subPath) {
          return subPath;
        }
      }
    }
    return null;
  }

  const promptsHtml = prompts
    .map((prompt, index) => {
      const groupPath = findPromptGroupPath(prompt.id, existingGroups);
      const isInGroup = groupPath !== null;

      return `
      <div class="prompt-item" data-prompt-id="${prompt.id}" data-index="${index}" 
           style="display: flex; align-items: flex-start; padding: 10px; border: 1px solid #e0e0e0; margin: 3px 0; border-radius: 6px; cursor: pointer; background-color: ${isInGroup ? '#e8f5e8' : '#fff'}; min-height: 44px;">
        <input type="checkbox" class="prompt-checkbox" style="margin-right: 12px; transform: scale(1.3); flex-shrink: 0; margin-top: 2px;">
        <div class="prompt-text" style="flex: 1; min-width: 0;">
          <div style="font-weight: ${prompt.enabled ? 'bold' : 'normal'}; color: ${prompt.enabled ? '#000' : '#666'}; font-size: 14px; line-height: 1.4; word-wrap: break-word; overflow-wrap: break-word;">
          ${$('<div/>').text(prompt.name).html()}
          </div>
          ${isInGroup ? `<div style="color: #666; font-size: 12px; margin-top: 4px; word-wrap: break-word; overflow-wrap: break-word;">📁 ${groupPath}</div>` : ''}
        </div>
        ${isInGroup ? `<span class="group-tag" style="background-color: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; margin-left: 8px; flex-shrink: 0; align-self: flex-start; margin-top: 2px;">已分组</span>` : ''}
      </div>
    `;
    })
    .join('');

  const popupHtml = `
    <div id="${popupId}" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;">
      <div style="background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 700px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 85vh; position: relative;">
        <button id="grouping-close" style="position: absolute; top: 15px; right: 15px; background: none; border: none; color: #9a6b4f; font-size: 24px; cursor: pointer; z-index: 10003; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border-radius: 50%; transition: background-color 0.2s;">&times;</button>
        <h4 style="margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px; padding-right: 40px;">预设编辑器</h4>
        
        <!-- 操作区域 - 并排布局 -->
        <div class="操作区域" style="margin: 15px 0; display: flex; gap: 12px; flex-wrap: wrap;">
          <!-- 分组管理区域 -->
          <div style="flex: 1; min-width: 280px; padding: 12px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #4CAF50;">
            <div style="font-size: 14px; font-weight: bold; color: #2e7d32; margin-bottom: 8px;">📁 分组管理</div>
            <input type="text" id="group-name-input" placeholder="输入分组名称..." style="width: 100%; padding: 8px 12px; border: 1px solid #d4b58b; border-radius: 6px; background: #fff; color: #333; font-size: 14px; margin-bottom: 10px; box-sizing: border-box;">
            <div style="position: relative; display: inline-block; width: 100%;">
              <button id="group-management-btn" style="width: 100%; padding: 10px 16px; background-color:#4CAF50; border:none; border-radius:6px; color:#fff; cursor:pointer; font-weight:bold; font-size: 14px; display: flex; align-items: center; justify-content: space-between;">
                <span>分组操作</span>
                <span style="font-size: 12px;">▼</span>
              </button>
              <div id="group-management-menu" style="display: none; position: absolute; top: 100%; left: 0; right: 0; background-color: #fff; border: 1px solid #d4b58b; border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10002; margin-top: 2px;">
                <button id="create-group-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#333; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">创建分组</button>
                <button id="remove-group-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#f44336; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">移除分组</button>
                <button id="dissolve-group-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#ff9800; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">解散分组</button>
                <button id="clear-all-groups-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#ff5722; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">清除所有</button>
                <div style="border-top: 1px solid #eee; margin: 5px 0;"></div>
                <button class="dropdown-close-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#888; cursor:pointer; font-size: 13px; text-align: center;">关闭</button>
              </div>
          </div>
        </div>

          <!-- 条目操作区域 -->
          <div style="flex: 1; min-width: 280px; padding: 12px; background-color: #f0f8ff; border-radius: 8px; border-left: 4px solid #2196F3;">
            <div style="font-size: 14px; font-weight: bold; color: #1976D2; margin-bottom: 8px;">✏️ 条目操作</div>
            <div style="display: flex; gap: 8px; flex-wrap: wrap;">
              <div style="position: relative; display: inline-block; flex: 1; min-width: 120px;">
                <button id="item-selection-btn" style="width: 100%; padding: 10px 16px; background-color:#2196F3; border:none; border-radius:6px; color:#fff; cursor:pointer; font-weight:bold; font-size: 13px; display: flex; align-items: center; justify-content: space-between;">
                  <span>选择操作</span>
                  <span style="font-size: 12px;">▼</span>
                </button>
                <div id="item-selection-menu" style="display: none; position: absolute; top: 100%; left: 0; right: 0; background-color: #fff; border: 1px solid #d4b58b; border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10002; margin-top: 2px;">
                  <button id="select-all-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#333; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">全选</button>
                  <button id="select-none-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#9E9E9E; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">全不选</button>
                  <button id="move-prompts-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#673AB7; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">移动条目</button>
                  <div style="border-top: 1px solid #eee; margin: 5px 0;"></div>
                  <button class="dropdown-close-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#888; cursor:pointer; font-size: 13px; text-align: center;">关闭</button>
                </div>
              </div>
              <div style="position: relative; display: inline-block; flex: 1; min-width: 120px;">
                <button id="item-edit-btn" style="width: 100%; padding: 10px 16px; background-color:#4CAF50; border:none; border-radius:6px; color:#fff; cursor:pointer; font-weight:bold; font-size: 13px; display: flex; align-items: center; justify-content: space-between;">
                  <span>编辑操作</span>
                  <span style="font-size: 12px;">▼</span>
                </button>
                <div id="item-edit-menu" style="display: none; position: absolute; top: 100%; left: 0; right: 0; background-color: #fff; border: 1px solid #d4b58b; border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10002; margin-top: 2px;">
                  <button id="add-prompt-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#4CAF50; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">新增条目</button>
                  <button id="edit-prompt-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#FF9800; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">编辑条目</button>
                  <button id="delete-prompts-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#F44336; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">删除条目</button>
                  <div style="border-top: 1px solid #eee; margin: 5px 0;"></div>
                  <button class="dropdown-close-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#888; cursor:pointer; font-size: 13px; text-align: center;">关闭</button>
                </div>
              </div>
              <div style="position: relative; display: inline-block; flex: 1; min-width: 120px;">
                <button id="item-group-btn" style="width: 100%; padding: 10px 16px; background-color:#9C27B0; border:none; border-radius:6px; color:#fff; cursor:pointer; font-weight:bold; font-size: 13px; display: flex; align-items: center; justify-content: space-between;">
                  <span>分组操作</span>
                  <span style="font-size: 12px;">▼</span>
                </button>
                <div id="item-group-menu" style="display: none; position: absolute; top: 100%; left: 0; right: 0; background-color: #fff; border: 1px solid #d4b58b; border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10002; margin-top: 2px;">
                  <button id="add-to-group-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#9C27B0; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">加入分组</button>
                  <button id="remove-from-group-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#FF5722; cursor:pointer; font-size: 13px; text-align: left; border-bottom: 1px solid #f0f0f0;">移出分组</button>
                  <div style="border-top: 1px solid #eee; margin: 5px 0;"></div>
                  <button class="dropdown-close-btn" style="width: 100%; padding: 10px 16px; border:none; background:none; color:#888; cursor:pointer; font-size: 13px; text-align: center;">关闭</button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div style="flex: 1; min-height: 300px; max-height: 400px; overflow-y: auto; border: 1px solid #f0e2d0; border-radius: 8px; padding: 16px; margin-bottom: 15px; background-color: #fafafa;">
          <div style="font-size: 13px; color: #666; margin-bottom: 12px; line-height: 1.4;">💡 提示：选中条目后可以创建分组，支持多级分组。分组后的条目会在预设界面中折叠显示，便于管理</div>
          <div id="prompts-container">
            ${promptsHtml}
          </div>
        </div>


        <div style="display: flex; flex-wrap: wrap; justify-content: flex-start; align-items: flex-start; gap: 10px; flex-shrink: 0; margin-top: auto; padding: 8px 0; min-height: 30px;">
          <div id="existing-groups-info" style="font-size: 12px; color: #666; flex: 1; min-width: 200px; word-wrap: break-word; overflow-wrap: break-word; line-height: 1.4; max-width: 100%; min-height: 20px; display: block;"></div>
        </div>
      </div>
    </div>
  `;

  $('body').append(popupHtml);

  // 显示现有分组信息
  console.log('现有分组:', existingGroups);
  updateExistingGroupsInfo(existingGroups);

  // 绑定事件（防止重复绑定）
  if (!groupingEventsBound) {
    bindGroupingEvents(prompts, existingGroups);
    groupingEventsBound = true;
  } else {
    console.log('分组事件已绑定，重新绑定以确保事件正确');
    // 即使已绑定，也要重新绑定以确保事件正确（适配脚本重复加载）
    bindGroupingEvents(prompts, existingGroups);
  }

  // 立即绑定关闭按钮事件，确保能正常工作
  setTimeout(() => {
    $('.dropdown-close-btn')
      .off('click')
      .on('click', function (e) {
        e.stopPropagation();
        e.preventDefault();
        const menu = $(this).closest('[id$="-menu"]');
        if (menu.length > 0) {
          menu.hide();
          console.log('下拉菜单已关闭:', menu.attr('id'));
        } else {
          console.warn('未找到对应的菜单元素');
        }
      });
    console.log('关闭按钮事件已重新绑定');
  }, 100);

  // 移动端样式
  const mobileStyles = `<style>
    #${popupId} #grouping-close:hover {
      background-color: rgba(154, 107, 79, 0.1) !important;
    }
    .dropdown-close-btn:hover {
      background-color: rgba(153, 153, 153, 0.1) !important;
    }
    
    /* 平板端适配 (768px - 1024px) */
    @media (max-width: 1024px) {
      #${popupId} > div {
        width: 92% !important;
        max-width: 650px !important;
        max-height: 88vh !important;
      }
      #${popupId} .操作区域 {
        gap: 10px !important;
      }
      #${popupId} .操作区域 > div {
        min-width: 250px !important;
      }
    }
    
    /* 小屏幕适配 (600px - 768px) */
    @media (max-width: 768px) {
      #${popupId} { 
        align-items: flex-start !important; 
        padding: 8px !important;
      } 
      #${popupId} > div { 
        width: 96% !important;
        max-width: none !important;
        margin-top: 1vh !important;
        max-height: 96vh !important;
        padding: 16px !important;
      }
      #${popupId} h4 {
        font-size: 17px !important;
        margin-bottom: 12px !important;
        padding-right: 35px !important;
      }
      #${popupId} .操作区域 {
        flex-direction: column !important;
        gap: 8px !important;
        margin: 12px 0 !important;
      }
      #${popupId} .操作区域 > div {
        min-width: 100% !important;
        flex: none !important;
        padding: 10px !important;
      }
      #${popupId} #grouping-close {
        top: 12px !important;
        right: 12px !important;
        font-size: 26px !important;
        width: 32px !important;
        height: 32px !important;
      }
    }
    
    /* 手机端适配 (480px - 600px) */
    @media (max-width: 600px) {
      #${popupId} {
        padding: 5px !important;
      }
      #${popupId} > div {
        width: 98% !important;
        margin-top: 0.5vh !important;
        max-height: 98vh !important;
        padding: 14px !important;
        border-radius: 12px !important;
      }
      #${popupId} h4 {
        font-size: 16px !important;
        padding-right: 30px !important;
      }
      #${popupId} .操作区域 {
        margin: 10px 0 !important;
        gap: 6px !important;
      }
      #${popupId} .操作区域 > div {
        padding: 8px !important;
        border-radius: 6px !important;
      }
      #${popupId} .操作区域 h5 {
        font-size: 13px !important;
        margin-bottom: 8px !important;
      }
      #${popupId} .操作区域 input {
        font-size: 14px !important;
        padding: 8px 10px !important;
      }
      #${popupId} .操作区域 button {
        font-size: 13px !important;
        padding: 8px 12px !important;
      }
      #${popupId} #grouping-close {
        top: 8px !important;
        right: 8px !important;
        font-size: 24px !important;
        width: 30px !important;
        height: 30px !important;
      }
      #${popupId} #prompts-container {
        min-height: 250px !important;
        max-height: 350px !important;
        padding: 12px !important;
      }
      #${popupId} .prompt-item {
        padding: 8px 10px !important;
        margin-bottom: 6px !important;
        font-size: 13px !important;
        word-wrap: break-word !important;
        white-space: normal !important;
        line-height: 1.4 !important;
      }
      #${popupId} .prompt-item input[type="checkbox"] {
        width: 16px !important;
        height: 16px !important;
        margin-right: 8px !important;
        flex-shrink: 0 !important;
      }
      #${popupId} .prompt-item .prompt-text {
        flex: 1 !important;
        min-width: 0 !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
      }
      #${popupId} [id$="-menu"] {
        position: fixed !important;
        top: 20vh !important;
        left: 50% !important;
        transform: translateX(-50%) !important;
        width: 85% !important;
        max-width: 320px !important;
        z-index: 10003 !important;
        box-shadow: 0 8px 25px rgba(0,0,0,0.3) !important;
        border-radius: 8px !important;
        padding: 12px !important;
        max-height: 60vh !important;
        overflow-y: auto !important;
      }
      #${popupId} [id$="-menu"] button {
        padding: 10px 14px !important;
        font-size: 13px !important;
        min-height: 44px !important;
        margin: 2px 0 !important;
      }
    }
    
    /* 小屏手机适配 (360px - 480px) */
    @media (max-width: 480px) {
      #${popupId} > div {
        width: 99% !important;
        margin-top: 0 !important;
        max-height: 99vh !important;
        padding: 12px !important;
        border-radius: 10px !important;
      }
      #${popupId} h4 {
        font-size: 15px !important;
        padding-right: 28px !important;
      }
      #${popupId} .操作区域 {
        margin: 8px 0 !important;
        gap: 5px !important;
      }
      #${popupId} .操作区域 > div {
        padding: 6px !important;
        border-radius: 5px !important;
      }
      #${popupId} .操作区域 h5 {
        font-size: 12px !important;
        margin-bottom: 6px !important;
      }
      #${popupId} .操作区域 input {
        font-size: 13px !important;
        padding: 6px 8px !important;
      }
      #${popupId} .操作区域 button {
        font-size: 12px !important;
        padding: 6px 10px !important;
      }
      #${popupId} #grouping-close {
        top: 6px !important;
        right: 6px !important;
        font-size: 22px !important;
        width: 28px !important;
        height: 28px !important;
      }
      #${popupId} #prompts-container {
        min-height: 200px !important;
        max-height: 300px !important;
        padding: 10px !important;
      }
      #${popupId} .prompt-item {
        padding: 6px 8px !important;
        margin-bottom: 4px !important;
        font-size: 12px !important;
        word-wrap: break-word !important;
        white-space: normal !important;
        line-height: 1.3 !important;
      }
      #${popupId} .prompt-item input[type="checkbox"] {
        width: 14px !important;
        height: 14px !important;
        margin-right: 6px !important;
        flex-shrink: 0 !important;
      }
      #${popupId} .prompt-item .prompt-text {
        flex: 1 !important;
        min-width: 0 !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
      }
      #${popupId} #existing-groups-info {
        font-size: 10px !important;
        line-height: 1.2 !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
        padding: 4px 0 !important;
      }
      #${popupId} [id$="-menu"] {
        position: fixed !important;
        top: 15vh !important;
        left: 50% !important;
        transform: translateX(-50%) !important;
        width: 90% !important;
        max-width: 300px !important;
        padding: 10px !important;
        max-height: 70vh !important;
        overflow-y: auto !important;
      }
      #${popupId} [id$="-menu"] button {
        padding: 8px 12px !important;
        font-size: 12px !important;
        min-height: 40px !important;
      }
    }
    
    /* 超小屏适配 (320px - 360px) */
    @media (max-width: 360px) {
      #${popupId} > div {
        width: 100% !important;
        margin: 0 !important;
        max-height: 100vh !important;
        padding: 10px !important;
        border-radius: 8px !important;
      }
      #${popupId} h4 {
        font-size: 14px !important;
        padding-right: 25px !important;
      }
      #${popupId} .操作区域 {
        margin: 6px 0 !important;
        gap: 4px !important;
      }
      #${popupId} .操作区域 > div {
        padding: 5px !important;
        border-radius: 4px !important;
      }
      #${popupId} .操作区域 h5 {
        font-size: 11px !important;
        margin-bottom: 4px !important;
      }
      #${popupId} .操作区域 input {
        font-size: 12px !important;
        padding: 5px 6px !important;
      }
      #${popupId} .操作区域 button {
        font-size: 11px !important;
        padding: 5px 8px !important;
      }
      #${popupId} #grouping-close {
        top: 5px !important;
        right: 5px !important;
        font-size: 20px !important;
        width: 26px !important;
        height: 26px !important;
      }
      #${popupId} #prompts-container {
        min-height: 180px !important;
        max-height: 280px !important;
        padding: 8px !important;
      }
      #${popupId} .prompt-item {
        padding: 5px 6px !important;
        margin-bottom: 3px !important;
        font-size: 11px !important;
        word-wrap: break-word !important;
        white-space: normal !important;
        line-height: 1.2 !important;
      }
      #${popupId} .prompt-item input[type="checkbox"] {
        width: 12px !important;
        height: 12px !important;
        margin-right: 5px !important;
        flex-shrink: 0 !important;
      }
      #${popupId} .prompt-item .prompt-text {
        flex: 1 !important;
        min-width: 0 !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
      }
      #${popupId} #existing-groups-info {
        font-size: 9px !important;
        line-height: 1.1 !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
        padding: 3px 0 !important;
      }
      #${popupId} [id$="-menu"] {
        position: fixed !important;
        top: 10vh !important;
        left: 50% !important;
        transform: translateX(-50%) !important;
        width: 95% !important;
        max-width: 280px !important;
        padding: 8px !important;
        max-height: 80vh !important;
        overflow-y: auto !important;
      }
      #${popupId} [id$="-menu"] button {
        padding: 6px 10px !important;
        font-size: 11px !important;
        min-height: 36px !important;
      }
    }
  </style>`;
  $(`#${popupId}`).append(mobileStyles);
}

function updateExistingGroupsInfo(groups: PromptGroup[]): void {
  const infoElement = $('#existing-groups-info');
  if (!infoElement.length) {
    console.warn('分组信息元素未找到');
    return;
  }

  if (groups.length === 0) {
    infoElement.html('当前没有分组');
  } else {
    const groupNames = getGroupNamesRecursively(groups);
    const groupText = groupNames.length > 0 ? groupNames.join(', ') : '无';
    infoElement.html(`现有分组: ${groupText}`);
  }
}

// 递归获取所有分组名称（包括子分组）
function getGroupNamesRecursively(groups: PromptGroup[]): string[] {
  const names: string[] = [];

  groups.forEach(group => {
    names.push(group.name);

    if (group.subGroups.length > 0) {
      const subGroupNames = getGroupNamesRecursively(group.subGroups);
      subGroupNames.forEach(subName => {
        names.push(`${group.name}/${subName}`);
      });
    }
  });

  return names;
}

function bindGroupingEvents(
  _prompts: Array<{ id: string; name: string; element: JQuery; enabled: boolean }>,
  existingGroups: PromptGroup[],
): void {
  let selectedPrompts: string[] = [];

  // 先解绑所有可能重复的事件，防止重复绑定
  $('.prompt-item').off('click');
  $('.prompt-checkbox').off('change');
  $('#select-all-btn').off('click');
  $('#select-none-btn').off('click');
  $('#move-prompts-btn').off('click');
  $('#add-prompt-btn').off('click');
  $('#edit-prompt-btn').off('click');
  $('#delete-prompts-btn').off('click');
  $('#create-group-btn').off('click');
  $('#remove-group-btn').off('click');
  $('#dissolve-group-btn').off('click');
  $('#clear-all-groups-btn').off('click');
  $('#grouping-close').off('click');

  // 新增的下拉菜单按钮
  $('#group-management-btn').off('click');
  $('#item-selection-btn').off('click');
  $('#item-edit-btn').off('click');
  $('#item-group-btn').off('click');
  $('#add-to-group-btn').off('click');
  $('#remove-from-group-btn').off('click');
  $('.dropdown-close-btn').off('click');

  // 解绑文档级别的事件，防止重复绑定
  $(document).off('click', '.dropdown-close-btn');
  $(document).off('click', '[id$="-btn"], [id$="-menu"]');

  // 条目选择
  $('.prompt-item').on('click', function (e) {
    if ((e.target as HTMLInputElement).type === 'checkbox') return;

    const checkbox = $(this).find('.prompt-checkbox');
    checkbox.prop('checked', !checkbox.prop('checked'));
    updateSelectedPrompts();
  });

  $('.prompt-checkbox').on('change', updateSelectedPrompts);

  function updateSelectedPrompts(): void {
    selectedPrompts = [];
    $('.prompt-checkbox:checked').each(function () {
      const promptId = $(this).closest('.prompt-item').data('prompt-id');
      selectedPrompts.push(promptId);
    });
  }

  // 全选/全不选
  $('#select-all-btn').on('click', () => {
    $('.prompt-checkbox').prop('checked', true);
    updateSelectedPrompts();
  });

  $('#select-none-btn').on('click', () => {
    $('.prompt-checkbox').prop('checked', false);
    updateSelectedPrompts();
  });

  // 移动条目
  $('#move-prompts-btn').on('click', async () => {
    if (selectedPrompts.length === 0) {
      toastr.error('请选择要移动的条目');
      return;
    }

    // 显示目标位置选择弹窗
    await showPositionSelectionPopup(
      _prompts,
      selectedPrompts,
      (targetPromptId: string, position: 'above' | 'below') => {
        movePromptsToPosition(selectedPrompts, targetPromptId, position);

        // 清除选择状态
        $('.prompt-checkbox').prop('checked', false);
        selectedPrompts = [];

        toastr.success('条目移动完成，将在关闭分组界面时应用到预设');
      },
    );
  });

  // 新增条目
  $('#add-prompt-btn').on('click', async () => {
    await showAddPromptPopup(() => {
      // 重新加载分组界面以显示新条目
      setTimeout(() => {
        $('#preset-manager-grouping-popup').remove();
        showPromptGroupingUI();
      }, 100);
    });
  });

  // 编辑条目
  $('#edit-prompt-btn').on('click', async () => {
    if (selectedPrompts.length !== 1) {
      toastr.error('请选择一个条目进行编辑');
      return;
    }

    const promptId = selectedPrompts[0];
    const prompt = _prompts.find(p => p.id === promptId);
    if (!prompt) {
      toastr.error('未找到要编辑的条目');
      return;
    }

    await showEditPromptPopup(prompt, () => {
      // 重新加载分组界面以显示更新后的条目
      setTimeout(() => {
        $('#preset-manager-grouping-popup').remove();
        showPromptGroupingUI();
      }, 100);
    });
  });

  // 删除条目
  $('#delete-prompts-btn').on('click', async () => {
    if (selectedPrompts.length === 0) {
      toastr.error('请选择要删除的条目');
      return;
    }

    const confirmChoice = await triggerSlash(
      `/popup okButton="确认删除" cancelButton="取消" result=true "确定要删除选中的 ${selectedPrompts.length} 个条目吗？此操作不可撤销。"`,
    );

    if (confirmChoice === '1') {
      await deleteSelectedPrompts(selectedPrompts);

      // 重新加载分组界面
      setTimeout(() => {
        $('#preset-manager-grouping-popup').remove();
        showPromptGroupingUI();
      }, 100);
    }
  });

  // 加入分组
  $('#add-to-group-btn').on('click', async () => {
    if (selectedPrompts.length === 0) {
      toastr.error('请选择要加入分组的条目');
      return;
    }

    // 检查选中的条目是否已经在其他分组中
    const alreadyGroupedPrompts: string[] = [];
    selectedPrompts.forEach(promptId => {
      const existingGroup = findPromptInGroups(existingGroups, promptId);
      if (existingGroup) {
        alreadyGroupedPrompts.push(promptId);
      }
    });

    if (alreadyGroupedPrompts.length > 0) {
      // 获取已分组条目的名称
      const alreadyGroupedNames = alreadyGroupedPrompts.map(promptId => {
        const promptItem = $(`.prompt-item[data-prompt-id="${promptId}"]`);
        return promptItem.find('.prompt-text div:first').text().trim();
      });

      toastr.error(
        `以下条目已在其他分组中，无法重复分组：${alreadyGroupedNames.slice(0, 3).join('、')}${alreadyGroupedNames.length > 3 ? '等' : ''}`,
      );
      return;
    }

    // 显示分组选择弹窗
    await showGroupSelectionPopup(selectedPrompts, existingGroups);
  });

  // 移出分组
  $('#remove-from-group-btn').on('click', async () => {
    if (selectedPrompts.length === 0) {
      toastr.error('请选择要移出分组的条目');
      return;
    }

    // 检查选中的条目是否在分组中
    const groupedPrompts: string[] = [];
    selectedPrompts.forEach(promptId => {
      const existingGroup = findPromptInGroups(existingGroups, promptId);
      if (existingGroup) {
        groupedPrompts.push(promptId);
      }
    });

    if (groupedPrompts.length === 0) {
      toastr.error('选中的条目都不在任何分组中');
      return;
    }

    const confirmChoice = await triggerSlash(
      `/popup okButton="确认移出" cancelButton="取消" result=true "确定要将选中的 ${groupedPrompts.length} 个条目移出分组吗？"`,
    );

    if (confirmChoice === '1') {
      await removePromptsFromGroups(groupedPrompts, existingGroups);

      // 重新加载分组界面
      setTimeout(() => {
        $('#preset-manager-grouping-popup').remove();
        showPromptGroupingUI();
      }, 100);
    }
  });

  // 创建分组
  $('#create-group-btn').on('click', async () => {
    const groupName = $('#group-name-input').val()?.toString().trim();
    if (!groupName) {
      toastr.error('请输入分组名称');
      return;
    }

    if (selectedPrompts.length === 0) {
      toastr.error('请选择要分组的条目');
      return;
    }

    // 检测选中条目是否都属于同一个分组
    const parentGroup = detectCommonParentGroup(selectedPrompts, existingGroups);

    if (parentGroup) {
      // 选中的条目都属于同一个分组，创建子分组
      await createSubGroup(parentGroup, groupName, selectedPrompts, existingGroups);
    } else {
      // 检查选中的条目是否已经在其他分组中
      const alreadyGroupedPrompts: string[] = [];
      selectedPrompts.forEach(promptId => {
        const existingGroup = findPromptInGroups(existingGroups, promptId);
        if (existingGroup) {
          alreadyGroupedPrompts.push(promptId);
        }
      });

      if (alreadyGroupedPrompts.length > 0) {
        // 获取已分组条目的名称
        const alreadyGroupedNames = alreadyGroupedPrompts.map(promptId => {
          const promptItem = $(`.prompt-item[data-prompt-id="${promptId}"]`);
          return promptItem.find('span:first').text().trim();
        });

        toastr.error(
          `以下条目已在其他分组中，无法重复分组：${alreadyGroupedNames.slice(0, 3).join('、')}${alreadyGroupedNames.length > 3 ? '等' : ''}`,
        );
        return;
      }

      // 检查是否有重名的顶级分组
      if (existingGroups.some(g => g.name === groupName)) {
        toastr.error('分组名称已存在');
        return;
      }

      // 创建新的顶级分组
      await createTopLevelGroup(groupName, selectedPrompts, existingGroups);
    }

    // 更新界面状态
    updateExistingGroupsInfo(existingGroups);
    $('#group-name-input').val('');
    $('.prompt-checkbox').prop('checked', false);
    selectedPrompts = [];

    // 保存分组配置
    const currentPresetName = TavernHelper.getLoadedPresetName();
    const validGroups = existingGroups.filter(g => hasValidContent(g));
    savePresetGrouping(currentPresetName, validGroups);
  });

  // 移除分组
  $('#remove-group-btn').on('click', () => {
    if (selectedPrompts.length === 0) {
      toastr.error('请选择要移除分组的条目');
      return;
    }

    // 递归从所有分组（包括子分组）中移除选中的条目
    function removePromptsFromGroups(groups: PromptGroup[], promptIds: string[]): void {
      groups.forEach(group => {
        // 从当前分组的直接条目中移除
        group.promptIds = group.promptIds.filter(id => !promptIds.includes(id));

        // 递归处理子分组
        if (group.subGroups.length > 0) {
          removePromptsFromGroups(group.subGroups, promptIds);
        }
      });
    }

    // 从所有分组中移除选中的条目
    removePromptsFromGroups(existingGroups, selectedPrompts);

    // 递归移除空分组（包括子分组）
    function removeEmptyGroups(groups: PromptGroup[]): void {
      for (let i = groups.length - 1; i >= 0; i--) {
        const group = groups[i];

        // 递归处理子分组
        if (group.subGroups.length > 0) {
          removeEmptyGroups(group.subGroups);
        }

        // 检查当前分组是否为空（没有直接条目且没有子分组）
        if (group.promptIds.length === 0 && group.subGroups.length === 0) {
          groups.splice(i, 1);
        }
      }
    }

    removeEmptyGroups(existingGroups);

    // 更新UI
    selectedPrompts.forEach(promptId => {
      const item = $(`.prompt-item[data-prompt-id="${promptId}"]`);
      item.css('background-color', '#fff');
      item.find('.group-tag').remove();
      // 清除分组路径显示
      const promptText = item.find('.prompt-text');
      if (promptText.length > 0) {
        promptText.find('div:last-child').remove(); // 移除分组路径div
      }
    });

    updateExistingGroupsInfo(existingGroups);
    $('.prompt-checkbox').prop('checked', false);
    selectedPrompts = [];

    // 保存分组配置并立即应用
    const currentPresetName = TavernHelper.getLoadedPresetName();
    const validGroups = existingGroups.filter(g => hasValidContent(g));
    savePresetGrouping(currentPresetName, validGroups);

    // 立即应用分组到DOM
    applyGroupingToDOM(validGroups);
    // 延迟恢复以确保DOM更新完成
    setTimeout(() => {
      restoreGroupingImmediate();
    }, 100);

    toastr.success('已移除选中条目的分组');
  });

  // 解散分组
  $('#dissolve-group-btn').on('click', async () => {
    if (existingGroups.length === 0) {
      toastr.info('当前没有分组可以解散');
      return;
    }

    // 显示分组选择弹窗
    await showGroupSelectionPopup(existingGroups, (selectedGroupNames: string[]) => {
      if (selectedGroupNames.length === 0) {
        toastr.error('请选择要解散的分组');
        return;
      }

      // 解散选中的分组
      selectedGroupNames.forEach(groupName => {
        const groupIndex = existingGroups.findIndex(g => g.name === groupName);
        if (groupIndex > -1) {
          const group = existingGroups[groupIndex];

          // 更新UI - 移除分组标签和背景色
          group.promptIds.forEach(promptId => {
            const item = $(`.prompt-item[data-prompt-id="${promptId}"]`);
            item.css('background-color', '#fff');
            item.find('.group-tag').remove();
            // 清除分组路径显示
            const promptText = item.find('.prompt-text');
            if (promptText.length > 0) {
              promptText.find('div:last-child').remove(); // 移除分组路径div
            }
          });

          // 从分组数组中移除
          existingGroups.splice(groupIndex, 1);
        }
      });

      updateExistingGroupsInfo(existingGroups);

      // 保存分组配置并立即应用
      const currentPresetName = TavernHelper.getLoadedPresetName();
      const validGroups = existingGroups.filter(g => g.promptIds.length > 0);
      savePresetGrouping(currentPresetName, validGroups);

      // 立即应用分组到DOM
      applyGroupingToDOM(validGroups);
      // 延迟恢复以确保DOM更新完成
      setTimeout(() => {
        restoreGroupingImmediate();
      }, 100);

      toastr.success(`已解散分组：${selectedGroupNames.join('、')}`);
    });
  });

  // 清除所有分组
  $('#clear-all-groups-btn').on('click', async () => {
    if (existingGroups.length === 0) {
      toastr.info('当前没有分组需要清除');
      return;
    }

    const confirmChoice = await triggerSlash(
      `/popup okButton="确认清除" cancelButton="取消" result=true "确定要清除当前预设的所有分组吗？此操作不可撤销。"`,
    );
    if (confirmChoice === '1') {
      // 清空分组数组
      existingGroups.length = 0;

      // 更新UI显示
      $('.prompt-item').each(function () {
        $(this).css('background-color', '#fff');
        $(this).find('.group-tag').remove();
        // 清除分组路径显示
        const promptText = $(this).find('.prompt-text');
        if (promptText.length > 0) {
          promptText.find('div:last-child').remove(); // 移除分组路径div
        }
      });

      updateExistingGroupsInfo(existingGroups);
      $('.prompt-checkbox').prop('checked', false);
      selectedPrompts = [];

      // 保存分组配置并立即应用
      const currentPresetName = TavernHelper.getLoadedPresetName();
      const validGroups = existingGroups.filter(g => g.promptIds.length > 0);
      savePresetGrouping(currentPresetName, validGroups);

      // 立即应用分组到DOM
      applyGroupingToDOM(validGroups);
      // 延迟恢复以确保DOM更新完成
      setTimeout(() => {
        restoreGroupingImmediate();
      }, 100);

      toastr.success('已清除所有分组');
    }
  });

  // 关闭
  $('#grouping-close').on('click', () => {
    // 关闭前确保保存当前的分组状态
    const currentPresetName = TavernHelper.getLoadedPresetName();
    const validGroups = existingGroups.filter(g => hasValidContent(g));
    savePresetGrouping(currentPresetName, validGroups);

    // 确保分组应用到预设界面
    applyGroupingToDOM(validGroups);

    // 重置事件绑定标记
    groupingEventsBound = false;
    $('#preset-manager-grouping-popup').remove();
    console.log('分组界面关闭，已保存并应用分组配置');
  });

  // 下拉菜单交互逻辑
  $('#group-management-btn').on('click', function (e) {
    e.stopPropagation();
    const menu = $('#group-management-menu');
    menu.toggle();
    // 关闭其他菜单
    $('#item-selection-menu, #item-edit-menu, #item-group-menu').hide();
  });

  $('#item-selection-btn').on('click', function (e) {
    e.stopPropagation();
    const menu = $('#item-selection-menu');
    menu.toggle();
    // 关闭其他菜单
    $('#group-management-menu, #item-edit-menu, #item-group-menu').hide();
  });

  $('#item-edit-btn').on('click', function (e) {
    e.stopPropagation();
    const menu = $('#item-edit-menu');
    menu.toggle();
    // 关闭其他菜单
    $('#group-management-menu, #item-selection-menu, #item-group-menu').hide();
  });

  $('#item-group-btn').on('click', function (e) {
    e.stopPropagation();
    const menu = $('#item-group-menu');
    menu.toggle();
    // 关闭其他菜单
    $('#group-management-menu, #item-selection-menu, #item-edit-menu').hide();
  });

  // 关闭按钮事件 - 使用更具体的选择器避免重复绑定
  $(document)
    .off('click', '.dropdown-close-btn')
    .on('click', '.dropdown-close-btn', function (e) {
      e.stopPropagation();
      e.preventDefault();
      const menu = $(this).closest('[id$="-menu"]');
      if (menu.length > 0) {
        menu.hide();
        console.log('下拉菜单已关闭:', menu.attr('id'));
      } else {
        console.warn('未找到对应的菜单元素');
      }
    });

  // 为每个具体的关闭按钮单独绑定事件，确保能正常工作
  $('#group-management-menu .dropdown-close-btn')
    .off('click')
    .on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();
      $('#group-management-menu').hide();
      console.log('分组管理菜单已关闭');
    });

  $('#item-selection-menu .dropdown-close-btn')
    .off('click')
    .on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();
      $('#item-selection-menu').hide();
      console.log('条目选择菜单已关闭');
    });

  $('#item-edit-menu .dropdown-close-btn')
    .off('click')
    .on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();
      $('#item-edit-menu').hide();
      console.log('条目编辑菜单已关闭');
    });

  $('#item-group-menu .dropdown-close-btn')
    .off('click')
    .on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();
      $('#item-group-menu').hide();
      console.log('条目分组菜单已关闭');
    });

  // 点击其他地方关闭所有菜单
  $(document).on('click', function (e) {
    if (!$(e.target).closest('[id$="-btn"], [id$="-menu"]').length) {
      $('#group-management-menu, #item-selection-menu, #item-edit-menu, #item-group-menu').hide();
    }
  });
}

// 应用分组到DOM
function applyGroupingToDOM(groups: PromptGroup[]): void {
  console.log('开始应用分组到DOM，分组数量:', groups.length);

  // 检查是否有预设条目存在
  const promptElements = $('.completion_prompt_manager_prompt');
  if (promptElements.length === 0) {
    console.warn('未找到预设条目，无法应用分组');
    return;
  }

  console.log('找到预设条目数量:', promptElements.length);

  // 先确保所有条目都从分组容器中移出，然后再移除分组容器
  $('.prompt-group-container').each(function () {
    const container = $(this);
    const prompts = container.find('.completion_prompt_manager_prompt');
    // 将条目移动到分组容器之前
    container.before(prompts);
  });

  // 移除现有的分组容器
  $('.prompt-group-container').remove();

  // 递归应用分组
  applyGroupsRecursively(groups, 0);
}

// 递归应用分组到DOM
function applyGroupsRecursively(groups: PromptGroup[], level: number): void {
  groups.forEach(group => {
    // 检查分组是否有内容（条目或子分组）
    if (!hasValidContent(group)) return;

    console.log(
      '处理分组:',
      group.name,
      '层级:',
      level,
      '条目数量:',
      group.promptIds.length,
      '子分组数量:',
      group.subGroups.length,
    );

    // 获取分组中所有条目（包括子分组中的条目）
    const allPromptIds = getAllPromptIdsFromGroup(group);

    if (allPromptIds.length === 0) {
      console.log('分组没有条目，跳过:', group.name);
      return;
    }

    // 找到分组中的第一个条目作为插入点
    let firstPromptElement: JQuery | null = null;
    for (const promptId of allPromptIds) {
      const element = $(`.completion_prompt_manager_prompt[data-pm-identifier="${promptId}"]`);
      if (element.length > 0) {
        firstPromptElement = element;
        break;
      }
    }

    if (!firstPromptElement || firstPromptElement.length === 0) {
      console.log('未找到分组的任何条目:', group.name);
      return;
    }

    console.log('找到第一个条目，开始创建分组容器');

    // 统计分组内启用的条目数量（包括子分组）
    const enabledCount = allPromptIds.filter(promptId => {
      const promptElement = $(`.completion_prompt_manager_prompt[data-pm-identifier="${promptId}"]`);
      return promptElement.find('.prompt-manager-toggle-action').hasClass('fa-toggle-on');
    }).length;

    // 创建分组容器
    const indentStyle = level > 0 ? `margin-left: ${level * 20}px;` : '';
    const groupContainer = $(`
      <div class="prompt-group-container" data-group-id="${group.id}" style="border: 1px solid rgba(128, 128, 128, 0.3); margin: 5px 0; background-color: rgba(0, 0, 0, 0.05); ${indentStyle} overflow: visible;">
        <div class="prompt-group-header" style="padding: 6px 10px; background-color: rgba(0, 0, 0, 0.08); cursor: pointer; display: flex; align-items: center;">
          <span class="group-toggle-icon" style="margin-right: 6px; font-size: 12px; color: inherit;">${group.collapsed ? '▶' : '▼'}</span>
          <span style="font-weight: bold; color: inherit;">${$('<div/>').text(group.name).html()}</span>
          <span style="margin-left: 8px; font-size: 12px; color: #666;">(${enabledCount}/${allPromptIds.length})</span>
        </div>
        <div class="prompt-group-content" style="padding: 3px; min-height: 0; overflow: visible; ${group.collapsed ? 'display: none;' : 'display: block;'}"></div>
      </div>
    `);

    // 将分组插入到第一个条目之前
    firstPromptElement.before(groupContainer);
    console.log('分组容器已插入到DOM');

    // 将分组中的直接条目移动到分组容器中
    group.promptIds.forEach(promptId => {
      // 尝试多种选择器来查找条目
      let promptElement = $(`.completion_prompt_manager_prompt[data-pm-identifier="${promptId}"]`);

      // 如果没找到，尝试在子元素中查找
      if (promptElement.length === 0) {
        promptElement = $(`.completion_prompt_manager_prompt`).filter(function () {
          return (
            $(this).data('pm-identifier') === promptId ||
            $(this).find('[data-pm-identifier]').data('pm-identifier') === promptId
          );
        });
      }

      if (promptElement.length > 0) {
        groupContainer.find('.prompt-group-content').append(promptElement);
        console.log('移动条目到分组容器:', promptId);
      } else {
        console.warn('未找到条目:', promptId);
      }
    });

    // 递归处理子分组
    if (group.subGroups.length > 0) {
      // 创建子分组的容器
      const subGroupsContainer = $('<div class="subgroups-container"></div>');
      groupContainer.find('.prompt-group-content').append(subGroupsContainer);

      // 递归应用子分组
      applySubGroupsToContainer(group.subGroups, subGroupsContainer, level + 1);
    }

    console.log('分组容器创建完成，条目数量:', groupContainer.find('.completion_prompt_manager_prompt').length);

    // 绑定展开/折叠事件（使用立即执行函数避免闭包问题）
    (function (currentGroup) {
      const header = groupContainer.find('.prompt-group-header');
      console.log('为主分组绑定事件:', currentGroup.name, '头部元素数量:', header.length);

      // 先解绑旧事件，防止重复绑定
      header.off('click');

      header.on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        const content = $(this).siblings('.prompt-group-content');
        const icon = $(this).find('.group-toggle-icon');

        console.log('主分组点击事件触发:', currentGroup.name);
        console.log('内容元素数量:', content.length, '图标元素数量:', icon.length);
        console.log('当前内容可见状态:', content.is(':visible'));

        if (content.is(':visible') && content.css('display') !== 'none') {
          content.css('display', 'none');
          icon.text('▶');
          currentGroup.collapsed = true;
          console.log('主分组已折叠:', currentGroup.name);
        } else {
          content.css({
            display: 'block',
            visibility: 'visible',
            height: 'auto',
            overflow: 'visible',
          });
          content.show();
          icon.text('▼');
          currentGroup.collapsed = false;
          console.log('主分组已展开:', currentGroup.name);
          console.log('主分组展开后内容区域子元素数量:', content.children().length);
        }
      });
    })(group);
  });
}

// 应用子分组到指定容器
function applySubGroupsToContainer(subGroups: PromptGroup[], container: JQuery, level: number): void {
  subGroups.forEach(subGroup => {
    if (!hasValidContent(subGroup)) return;

    console.log('处理子分组:', subGroup.name, '层级:', level);

    // 获取子分组中所有条目
    const allPromptIds = getAllPromptIdsFromGroup(subGroup);

    // 统计启用的条目数量
    const enabledCount = allPromptIds.filter(promptId => {
      const promptElement = $(`.completion_prompt_manager_prompt[data-pm-identifier="${promptId}"]`);
      return promptElement.find('.prompt-manager-toggle-action').hasClass('fa-toggle-on');
    }).length;

    // 创建子分组容器
    const subGroupContainer = $(`
      <div class="prompt-group-container subgroup" data-group-id="${subGroup.id}" style="border: 1px solid rgba(128, 128, 128, 0.2); margin: 3px 0; background-color: rgba(0, 0, 0, 0.03); margin-left: 15px; overflow: visible;">
        <div class="prompt-group-header" style="padding: 4px 8px; background-color: rgba(0, 0, 0, 0.05); cursor: pointer; display: flex; align-items: center;">
          <span class="group-toggle-icon" style="margin-right: 6px; font-size: 11px; color: inherit;">${subGroup.collapsed ? '▶' : '▼'}</span>
          <span style="font-weight: bold; color: inherit; font-size: 13px;">${$('<div/>').text(subGroup.name).html()}</span>
          <span style="margin-left: 8px; font-size: 11px; color: #666;">(${enabledCount}/${allPromptIds.length})</span>
        </div>
        <div class="prompt-group-content" style="padding: 2px; min-height: 0; overflow: visible; ${subGroup.collapsed ? 'display: none;' : 'display: block;'}"></div>
      </div>
    `);

    container.append(subGroupContainer);

    // 移动子分组的直接条目
    console.log('开始移动子分组条目:', subGroup.promptIds);
    subGroup.promptIds.forEach(promptId => {
      let promptElement = $(`.completion_prompt_manager_prompt[data-pm-identifier="${promptId}"]`);

      if (promptElement.length === 0) {
        promptElement = $(`.completion_prompt_manager_prompt`).filter(function () {
          return (
            $(this).data('pm-identifier') === promptId ||
            $(this).find('[data-pm-identifier]').data('pm-identifier') === promptId
          );
        });
      }

      if (promptElement.length > 0) {
        const contentContainer = subGroupContainer.find('.prompt-group-content');
        contentContainer.append(promptElement);
        console.log('移动条目到子分组容器:', promptId, '容器内条目数量:', contentContainer.children().length);
      } else {
        console.warn('未找到条目元素:', promptId);
      }
    });

    const finalContentCount = subGroupContainer.find('.prompt-group-content').children().length;
    console.log('子分组最终包含的元素数量:', finalContentCount);

    // 递归处理更深层的子分组
    if (subGroup.subGroups.length > 0) {
      const deeperSubGroupsContainer = $('<div class="subgroups-container"></div>');
      subGroupContainer.find('.prompt-group-content').append(deeperSubGroupsContainer);
      applySubGroupsToContainer(subGroup.subGroups, deeperSubGroupsContainer, level + 1);
    }

    // 绑定展开/折叠事件（使用立即执行函数避免闭包问题）
    (function (currentSubGroup) {
      const header = subGroupContainer.find('.prompt-group-header');
      console.log('为子分组绑定事件:', currentSubGroup.name, '头部元素数量:', header.length);

      // 先解绑旧事件，防止重复绑定
      header.off('click');

      header.on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        const content = $(this).siblings('.prompt-group-content');
        const icon = $(this).find('.group-toggle-icon');

        console.log('子分组点击事件触发:', currentSubGroup.name);
        console.log('内容元素数量:', content.length, '图标元素数量:', icon.length);
        console.log('当前内容可见状态:', content.is(':visible'));
        console.log('当前内容display样式:', content.css('display'));

        if (content.is(':visible') && content.css('display') !== 'none') {
          content.css('display', 'none');
          icon.text('▶');
          currentSubGroup.collapsed = true;
          console.log('子分组已折叠:', currentSubGroup.name);
        } else {
          // 强制显示，并检查内容
          content.css({
            display: 'block',
            visibility: 'visible',
            height: 'auto',
            overflow: 'visible',
          });
          content.show(); // 双重保险
          icon.text('▼');
          currentSubGroup.collapsed = false;
          console.log('子分组已展开:', currentSubGroup.name);
          console.log('展开后内容区域子元素数量:', content.children().length);
          console.log('展开后实际高度:', content.height());

          // 强制重新渲染
          setTimeout(() => {
            content.trigger('resize');
            console.log('强制重新渲染后高度:', content.height());
          }, 10);
        }
      });
    })(subGroup);
  });
}

// 获取分组中的所有条目ID（递归包括子分组）
function getAllPromptIdsFromGroup(group: PromptGroup): string[] {
  let allIds = [...group.promptIds];

  group.subGroups.forEach(subGroup => {
    allIds = allIds.concat(getAllPromptIdsFromGroup(subGroup));
  });

  return allIds;
}

// 加载时恢复分组
export function restoreGroupingFromConfig(): void {
  try {
    const currentPresetName = TavernHelper.getLoadedPresetName();
    const groups = getPresetGrouping(currentPresetName);

    if (groups.length > 0) {
      console.log(`恢复预设 "${currentPresetName}" 的分组配置，共 ${groups.length} 个分组`);

      // 检查是否有预设条目存在
      const promptElements = $('.completion_prompt_manager_prompt');
      if (promptElements.length === 0) {
        console.log('⚠️ 未找到预设条目，延迟恢复分组');
        setTimeout(() => restoreGroupingFromConfig(), 200);
        return;
      }

      // 延迟一点时间确保DOM已加载
      setTimeout(() => {
        applyGroupingToDOM(groups);
      }, 200);
    } else {
      console.log(`预设 "${currentPresetName}" 没有分组配置`);
    }
  } catch (error) {
    console.error('恢复分组配置失败:', error);
  }
}

// 延迟恢复分组（用于DOM变化后）
// 防抖恢复分组
let restoreTimeout: number | null = null;

// 智能延迟恢复，根据操作类型调整延迟时间
export function restoreGroupingDelayed(delay: number = 200, operation: string = 'unknown'): void {
  if (restoreTimeout) {
    clearTimeout(restoreTimeout);
  }

  // 根据操作类型调整延迟时间
  let actualDelay = delay;
  switch (operation) {
    case 'toggle':
      actualDelay = 100; // 开关操作最快
      break;
    case 'settings':
      actualDelay = 200; // 设置更新中等
      break;
    case 'dom_change':
      actualDelay = 150; // DOM变化较快
      break;
    case 'preset_change':
      actualDelay = 100; // 预设切换最快
      break;
    default:
      actualDelay = delay;
  }

  restoreTimeout = window.setTimeout(() => {
    console.log(`🔄 延迟恢复分组开始... (操作: ${operation}, 延迟: ${actualDelay}ms)`);
    restoreGroupingFromConfig();
    restoreTimeout = null;
  }, actualDelay);
}

// 立即恢复分组（用于关键操作）
export function restoreGroupingImmediate(): void {
  console.log('⚡ 立即恢复分组...');
  restoreGroupingFromConfig();
}

// 强制恢复分组（多次尝试确保成功）
export function forceRestoreGrouping(): void {
  const tryRestore = (attempt: number) => {
    const currentPresetName = TavernHelper.getLoadedPresetName();
    const groups = getPresetGrouping(currentPresetName);
    const promptElements = $('.completion_prompt_manager_prompt');

    console.log(
      `第${attempt}次尝试恢复分组，预设: ${currentPresetName}, 分组数: ${groups.length}, 条目数: ${promptElements.length}`,
    );

    if (groups.length > 0 && promptElements.length > 0) {
      applyGroupingToDOM(groups);
      console.log('✅ 分组恢复成功');
    } else if (attempt < 5) {
      // 如果还没有条目或分组，继续尝试
      setTimeout(() => tryRestore(attempt + 1), 200);
    } else {
      console.log('⚠️ 分组恢复失败，已达到最大尝试次数');
    }
  };

  tryRestore(1);
}

// 主动触发分组恢复（用于关键操作后）
export function triggerGroupingRestore(): void {
  console.log('🔄 主动触发分组恢复...');
  // 先清除现有的分组效果
  clearAllGrouping();
  // 然后延迟恢复
  restoreGroupingDelayed(150, 'dom_change');
}

// 清除所有分组
export function clearAllGrouping(): void {
  $('.prompt-group-container').each(function () {
    const prompts = $(this).find('.completion_prompt_manager_prompt');
    $(this).before(prompts);
    $(this).remove();
  });
}

// 导出当前预设的分组配置
export function exportPresetGrouping(presetName: string): PromptGroup[] | null {
  const groups = getPresetGrouping(presetName);
  return groups.length > 0 ? groups : null;
}

// 导入分组配置到指定预设
export function importPresetGrouping(presetName: string, groups: PromptGroup[]): void {
  if (!groups || !Array.isArray(groups) || groups.length === 0) {
    console.warn('导入的分组配置为空或格式不正确');
    return;
  }

  console.log('开始导入分组配置到预设:', presetName, '分组数量:', groups.length);

  // 验证并修复分组数据结构
  const validGroups = groups
    .map(group => {
      // 确保分组对象有所有必需的字段
      const validGroup: PromptGroup = {
        id: group.id || Date.now().toString() + Math.random().toString(36).substr(2, 9),
        name: group.name || '未命名分组',
        promptIds: Array.isArray(group.promptIds) ? group.promptIds : [],
        subGroups: Array.isArray(group.subGroups) ? group.subGroups : [],
        collapsed: typeof group.collapsed === 'boolean' ? group.collapsed : true,
        level: typeof group.level === 'number' ? group.level : 0,
        parentId: group.parentId,
      };

      console.log('处理分组:', validGroup.name, '条目数量:', validGroup.promptIds.length);
      return validGroup;
    })
    .filter(group => group.promptIds.length > 0); // 只保留有条目的分组

  if (validGroups.length === 0) {
    console.warn('没有有效的分组配置');
    return;
  }

  console.log('有效分组数量:', validGroups.length);
  savePresetGrouping(presetName, validGroups);

  // 如果是当前预设，立即应用
  const currentPresetName = TavernHelper.getLoadedPresetName();
  console.log('当前预设:', currentPresetName, '目标预设:', presetName);
  if (currentPresetName === presetName) {
    console.log('立即应用分组到当前预设');
    setTimeout(() => {
      applyGroupingToDOM(validGroups);
    }, 100);
  }
}

// 获取所有预设的分组配置（用于批量导出）
export function getAllPresetGroupings(): Record<string, PromptGroup[]> {
  const allGroupings: Record<string, PromptGroup[]> = {};

  // 遍历localStorage中所有的分组配置
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key && key.startsWith('miaomiao_preset_groups_')) {
      const presetName = key.replace('miaomiao_preset_groups_', '');
      const groups = getPresetGrouping(presetName);
      if (groups.length > 0) {
        allGroupings[presetName] = groups;
      }
    }
  }

  return allGroupings;
}

// 清除指定预设的分组配置
export function clearPresetGrouping(presetName: string): void {
  localStorage.removeItem(getGroupingStorageKey(presetName));

  // 如果是当前预设，清除DOM中的分组
  const currentPresetName = TavernHelper.getLoadedPresetName();
  if (currentPresetName === presetName) {
    clearAllGrouping();
  }
}

// 显示分组选择弹窗
async function showGroupSelectionPopup(
  groups: PromptGroup[],
  onConfirm: (selectedGroupNames: string[]) => void,
): Promise<void> {
  const popupId = 'group-selection-popup';
  $(`#${popupId}`).remove();

  const groupsHtml = groups
    .map(
      group => `
    <div class="group-selection-item" style="display: flex; align-items: center; padding: 10px; border: 1px solid #e0e0e0; margin: 5px 0; border-radius: 6px; cursor: pointer; background-color: #fff;">
      <input type="checkbox" class="group-checkbox" data-group-name="${$('<div/>').text(group.name).html()}" style="margin-right: 12px; transform: scale(1.3);">
      <div style="flex: 1;">
        <div style="font-weight: bold; color: #333; font-size: 14px;">${$('<div/>').text(group.name).html()}</div>
        <div style="font-size: 12px; color: #666; margin-top: 2px;">包含 ${group.promptIds.length} 个条目</div>
      </div>
    </div>
  `,
    )
    .join('');

  const popupHtml = `
    <div id="${popupId}" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10002; display: flex; align-items: center; justify-content: center;">
      <div class="group-selection-popup-content" style="background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 500px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 70vh;">
        <h4 style="margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px;">选择要解散的分组</h4>
        
        <div style="margin: 15px 0; display: flex; gap: 8px; flex-wrap: wrap;">
          <button id="select-all-groups-btn" style="padding: 6px 12px; background-color:#2196F3; border:none; border-radius:6px; color:#fff; cursor:pointer; font-size:13px;">全选</button>
          <button id="select-none-groups-btn" style="padding: 6px 12px; background-color:#9E9E9E; border:none; border-radius:6px; color:#fff; cursor:pointer; font-size:13px;">全不选</button>
        </div>

        <div style="flex: 1; min-height: 0; overflow-y: auto; border: 1px solid #f0e2d0; border-radius: 8px; padding: 12px; margin-bottom: 15px;">
          <div style="font-size: 13px; color: #666; margin-bottom: 12px;">选择要解散的分组，解散后分组内的条目将变为独立条目</div>
          <div id="groups-container">
            ${groupsHtml}
          </div>
        </div>

        <div style="display: flex; justify-content: space-between; align-items: center; gap: 10px;">
          <div style="font-size: 12px; color: #666;">⚠️ 解散操作不可撤销</div>
          <div style="display: flex; gap: 8px;">
            <button id="group-selection-cancel" style="padding: 10px 16px; background-color:#9E9E9E; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff; font-size: 14px;">取消</button>
            <button id="group-selection-confirm" style="padding: 10px 16px; background-color:#ff9800; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff; font-size: 14px;">解散选中</button>
          </div>
        </div>
      </div>
    </div>
    <style>
      @media (max-width: 600px) {
        #${popupId} {
          align-items: flex-start !important;
          padding: 10px;
        }
        #${popupId} .group-selection-popup-content {
          margin-top: 5vh !important;
          max-height: 90vh !important;
          width: 95% !important;
          padding: 15px;
          border-radius: 12px;
        }
        #${popupId} .group-selection-item {
          padding: 12px !important;
          min-height: 48px !important;
        }
        #${popupId} .group-checkbox {
          transform: scale(1.4) !important;
          margin-right: 15px !important;
        }
        #${popupId} button {
          font-size: 14px !important;
          padding: 10px 14px !important;
          min-height: 44px;
        }
      }
      @media (max-width: 480px) {
        #${popupId} .group-selection-popup-content {
          margin-top: 2vh !important;
          max-height: 96vh !important;
          padding: 12px;
        }
        #${popupId} h4 {
          font-size: 16px !important;
          margin-bottom: 15px !important;
        }
        #${popupId} .group-selection-item {
          padding: 14px !important;
          min-height: 52px !important;
        }
      }
      @media (max-width: 360px) {
        #${popupId} .group-selection-popup-content {
          width: 98% !important;
          padding: 10px;
        }
        #${popupId} button {
          font-size: 13px !important;
          padding: 8px 12px !important;
        }
        #${popupId} h4 {
          font-size: 15px !important;
        }
      }
    </style>
  `;

  $('body').append(popupHtml);

  // 绑定事件
  $('.group-selection-item').on('click', function (e) {
    if ((e.target as HTMLInputElement).type === 'checkbox') return;

    const checkbox = $(this).find('.group-checkbox');
    checkbox.prop('checked', !checkbox.prop('checked'));
  });

  $('#select-all-groups-btn').on('click', () => {
    $('.group-checkbox').prop('checked', true);
  });

  $('#select-none-groups-btn').on('click', () => {
    $('.group-checkbox').prop('checked', false);
  });

  $('#group-selection-cancel').on('click', () => {
    $(`#${popupId}`).remove();
  });

  $('#group-selection-confirm').on('click', () => {
    const selectedGroupNames: string[] = [];
    $('.group-checkbox:checked').each(function () {
      selectedGroupNames.push($(this).data('group-name'));
    });

    $(`#${popupId}`).remove();
    onConfirm(selectedGroupNames);
  });
}

// 显示位置选择弹窗
async function showPositionSelectionPopup(
  allPrompts: Array<{ id: string; name: string; element: JQuery; enabled: boolean }>,
  selectedPromptIds: string[],
  onConfirm: (targetPromptId: string, position: 'above' | 'below') => void,
): Promise<void> {
  const popupId = 'position-selection-popup';
  $(`#${popupId}`).remove();

  // 过滤掉已选中的条目，只显示可以作为目标的条目
  const availablePrompts = allPrompts.filter(prompt => !selectedPromptIds.includes(prompt.id));

  if (availablePrompts.length === 0) {
    toastr.error('没有可用的目标位置');
    return;
  }

  const promptsHtml = availablePrompts
    .map(
      prompt => `
    <div class="position-target-item" data-prompt-id="${prompt.id}" style="border: 1px solid #e0e0e0; margin: 5px 0; border-radius: 6px; background-color: #fff;">
      <div style="padding: 10px; font-weight: ${prompt.enabled ? 'bold' : 'normal'}; color: ${prompt.enabled ? '#000' : '#666'}; font-size: 14px;">
        ${$('<div/>').text(prompt.name).html()}
      </div>
      <div style="display: flex; border-top: 1px solid #f0f0f0;">
        <button class="position-btn" data-prompt-id="${prompt.id}" data-position="above" style="flex: 1; padding: 8px; background-color: #e3f2fd; border: none; border-right: 1px solid #f0f0f0; cursor: pointer; font-size: 13px; color: #1976d2;">移动到上方</button>
        <button class="position-btn" data-prompt-id="${prompt.id}" data-position="below" style="flex: 1; padding: 8px; background-color: #f3e5f5; border: none; cursor: pointer; font-size: 13px; color: #7b1fa2;">移动到下方</button>
      </div>
    </div>
  `,
    )
    .join('');

  const popupHtml = `
    <div id="${popupId}" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10003; display: flex; align-items: center; justify-content: center;">
      <div class="position-selection-popup-content" style="background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 600px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;">
        <h4 style="margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px;">选择移动位置</h4>
        
        <div style="margin: 15px 0; padding: 12px; background-color: #e8f5e8; border-radius: 8px; border-left: 4px solid #4CAF50;">
          <div style="font-size: 13px; color: #2e7d32; font-weight: bold; margin-bottom: 6px;">📋 移动说明</div>
          <div style="font-size: 12px; color: #424242; line-height: 1.4;">
            已选择 ${selectedPromptIds.length} 个条目进行移动。点击目标条目的"移动到上方"或"移动到下方"按钮来设置新位置。
          </div>
        </div>

        <div style="flex: 1; min-height: 0; overflow-y: auto; border: 1px solid #f0e2d0; border-radius: 8px; padding: 12px; margin-bottom: 15px;">
          <div style="font-size: 13px; color: #666; margin-bottom: 12px;">选择要移动到哪个条目的上方或下方：</div>
          <div id="position-targets-container">
            ${promptsHtml}
          </div>
        </div>

        <div style="display: flex; justify-content: center;">
          <button id="position-selection-cancel" style="padding: 10px 16px; background-color:#9E9E9E; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff; font-size: 14px;">取消</button>
        </div>
      </div>
    </div>
    <style>
      .position-btn:hover {
        opacity: 0.8;
        font-weight: bold;
      }
      @media (max-width: 600px) {
        #${popupId} {
          align-items: flex-start !important;
          padding: 10px;
        }
        #${popupId} .position-selection-popup-content {
          margin-top: 5vh !important;
          max-height: 90vh !important;
          width: 95% !important;
          padding: 15px;
          border-radius: 12px;
        }
        #${popupId} .position-btn {
          font-size: 12px !important;
          padding: 6px !important;
        }
      }
      @media (max-width: 480px) {
        #${popupId} .position-selection-popup-content {
          margin-top: 2vh !important;
          max-height: 96vh !important;
          padding: 12px;
        }
        #${popupId} h4 {
          font-size: 16px !important;
        }
        #${popupId} .position-btn {
          font-size: 11px !important;
          padding: 5px !important;
        }
      }
    </style>
  `;

  $('body').append(popupHtml);

  // 绑定事件
  $('.position-btn').on('click', function () {
    const targetPromptId = $(this).data('prompt-id');
    const position = $(this).data('position') as 'above' | 'below';

    $(`#${popupId}`).remove();
    onConfirm(targetPromptId, position);
  });

  $('#position-selection-cancel').on('click', () => {
    $(`#${popupId}`).remove();
  });
}

// 移动条目到指定位置
function movePromptsToPosition(selectedPromptIds: string[], targetPromptId: string, position: 'above' | 'below'): void {
  console.log('开始移动条目:', selectedPromptIds, '到', targetPromptId, position);

  // 通过酒馆助手获取当前预设的条目顺序
  const currentPrompts = getCurrentPresetPrompts();
  const promptIds = currentPrompts.map(p => p.id);

  // 创建新的顺序数组
  const newOrder = [...promptIds];

  // 从原位置移除选中的条目
  selectedPromptIds.forEach(id => {
    const index = newOrder.indexOf(id);
    if (index > -1) {
      newOrder.splice(index, 1);
    }
  });

  // 找到目标位置
  const targetIndex = newOrder.indexOf(targetPromptId);
  if (targetIndex === -1) {
    console.error('未找到目标条目:', targetPromptId);
    toastr.error('移动失败：未找到目标条目');
    return;
  }

  // 计算插入位置
  const insertIndex = position === 'above' ? targetIndex : targetIndex + 1;

  // 在目标位置插入选中的条目
  newOrder.splice(insertIndex, 0, ...selectedPromptIds);

  console.log('新的条目顺序:', newOrder);

  // 应用新顺序到DOM
  applyNewPromptOrder(newOrder);

  // 更新分组界面的显示顺序
  updateGroupingUIOrder(newOrder);
}

// 应用新的条目顺序到DOM
function applyNewPromptOrder(newOrder: string[]): void {
  console.log('应用新的条目顺序到DOM');

  const container = $('.completion_prompt_manager_prompt').first().parent();
  if (container.length === 0) {
    console.error('未找到预设条目容器');
    return;
  }

  // 按新顺序重新排列DOM元素
  newOrder.forEach(promptId => {
    const element = $(`.completion_prompt_manager_prompt[data-pm-identifier="${promptId}"]`);
    if (element.length === 0) {
      // 尝试在子元素中查找
      const fallbackElement = $(`.completion_prompt_manager_prompt`).filter(function () {
        return $(this).find('[data-pm-identifier]').data('pm-identifier') === promptId;
      });
      if (fallbackElement.length > 0) {
        container.append(fallbackElement);
      }
    } else {
      container.append(element);
    }
  });

  console.log('DOM顺序更新完成');
}

// 更新分组界面的显示顺序
function updateGroupingUIOrder(newOrder: string[]): void {
  console.log('更新分组界面的显示顺序');

  const promptsContainer = $('#prompts-container');
  if (promptsContainer.length === 0) {
    console.log('分组界面未打开，跳过界面更新');
    return;
  }

  // 按新顺序重新排列分组界面中的条目
  newOrder.forEach(promptId => {
    const item = $(`.prompt-item[data-prompt-id="${promptId}"]`);
    if (item.length > 0) {
      promptsContainer.append(item);
    }
  });

  console.log('分组界面顺序更新完成');
}

// 显示新增条目弹窗
async function showAddPromptPopup(onSuccess: () => void): Promise<void> {
  const popupId = 'add-prompt-popup';
  $(`#${popupId}`).remove();

  // 获取当前所有条目用于位置选择
  const currentPrompts = getCurrentPresetPrompts();

  const popupHtml = `
    <div id="${popupId}" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10004; display: flex; align-items: center; justify-content: center;">
      <div class="add-prompt-popup-content" style="background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 700px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 90vh; overflow: hidden;">
        <h4 style="margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px; flex-shrink: 0;">新增条目</h4>
        
        <div style="flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 15px;">
          <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #6a4226;">条目名称：</label>
            <input type="text" id="add-prompt-name" placeholder="输入条目名称..." style="width: 100%; padding: 10px; border: 1px solid #d4b58b; border-radius: 6px; background: #fff; color: #333; font-size: 14px; margin-bottom: 15px; box-sizing: border-box;">
            
            <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #6a4226;">条目内容：</label>
            <textarea id="add-prompt-content" placeholder="输入条目内容..." style="width: 100%; height: 120px; padding: 10px; border: 1px solid #d4b58b; border-radius: 6px; background: #fff; color: #333; font-size: 14px; resize: vertical; box-sizing: border-box;"></textarea>
          </div>

          <div style="margin: 15px 0;">
            <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #6a4226;">插入位置：</label>
            <div style="display: flex; gap: 10px; margin-bottom: 10px;">
              <label style="display: flex; align-items: center; cursor: pointer;">
                <input type="radio" name="position-type" value="end" checked style="margin-right: 6px;">
                <span style="font-size: 14px;">添加到末尾</span>
              </label>
              <label style="display: flex; align-items: center; cursor: pointer;">
                <input type="radio" name="position-type" value="custom" style="margin-right: 6px;">
                <span style="font-size: 14px;">插入到指定位置</span>
              </label>
            </div>
            
            <div id="position-selection-container" style="display: none; border: 1px solid #e0e0e0; border-radius: 6px; max-height: 250px; overflow-y: auto;">
              ${currentPrompts
                .map(
                  prompt => `
                <div class="position-option" data-prompt-id="${prompt.id}" style="border-bottom: 1px solid #f0f0f0; last-child:border-bottom: none;">
                  <div style="padding: 8px 12px; font-weight: ${prompt.enabled ? 'bold' : 'normal'}; color: ${prompt.enabled ? '#000' : '#666'}; font-size: 13px; background-color: #fafafa;">
                    ${$('<div/>').text(prompt.name).html()}
                  </div>
                  <div style="display: flex;">
                    <button class="position-btn" data-prompt-id="${prompt.id}" data-position="above" style="flex: 1; padding: 6px; background-color: #e3f2fd; border: none; border-right: 1px solid #f0f0f0; cursor: pointer; font-size: 12px; color: #1976d2;">插入到上方</button>
                    <button class="position-btn" data-prompt-id="${prompt.id}" data-position="below" style="flex: 1; padding: 6px; background-color: #f3e5f5; border: none; cursor: pointer; font-size: 12px; color: #7b1fa2;">插入到下方</button>
                  </div>
                </div>
              `,
                )
                .join('')}
            </div>
            
            <div id="selected-position-info" style="margin-top: 10px; padding: 8px; background-color: #e8f5e8; border-radius: 4px; font-size: 13px; color: #2e7d32; display: none;">
              <strong>选择的位置：</strong><span id="position-description"></span>
            </div>
          </div>

          <div style="margin: 15px 0; padding: 12px; background-color: #e3f2fd; border-radius: 8px; border-left: 4px solid #2196F3;">
            <div style="font-size: 13px; color: #1976d2; font-weight: bold; margin-bottom: 6px;">💡 提示</div>
            <div style="font-size: 12px; color: #424242; line-height: 1.4;">
              选择"添加到末尾"会将新条目放在预设的最后。选择"插入到指定位置"可以精确控制新条目的位置。
            </div>
          </div>
        </div>

        <div style="display: flex; justify-content: space-between; align-items: center; gap: 10px; flex-shrink: 0; border-top: 1px solid #f0e2d0; padding-top: 15px;">
          <div style="display: flex; align-items: center;">
            <input type="checkbox" id="add-prompt-enabled" checked style="margin-right: 8px; transform: scale(1.2);">
            <label for="add-prompt-enabled" style="font-size: 13px; color: #666;">启用条目</label>
          </div>
          <div style="display: flex; gap: 8px;">
            <button id="add-prompt-cancel" style="padding: 10px 16px; background-color:#9E9E9E; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff; font-size: 14px;">取消</button>
            <button id="add-prompt-confirm" style="padding: 10px 16px; background-color:#4CAF50; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff; font-size: 14px;">创建条目</button>
          </div>
        </div>
      </div>
    </div>
    <style>
      @media (max-width: 600px) {
        #${popupId} {
          align-items: flex-start !important;
          padding: 10px;
        }
        #${popupId} .add-prompt-popup-content {
          margin-top: 5vh !important;
          max-height: 90vh !important;
          width: 95% !important;
          padding: 15px;
          border-radius: 12px;
        }
        #${popupId} textarea {
          height: 150px !important;
        }
      }
      @media (max-width: 480px) {
        #${popupId} .add-prompt-popup-content {
          margin-top: 2vh !important;
          max-height: 96vh !important;
          padding: 12px;
        }
        #${popupId} h4 {
          font-size: 16px !important;
        }
        #${popupId} textarea {
          height: 120px !important;
        }
      }
    </style>
  `;

  $('body').append(popupHtml);

  // 存储选择的位置信息
  let selectedPosition: { targetId: string; position: 'above' | 'below' } | null = null;

  // 绑定事件
  $('#add-prompt-cancel').on('click', () => {
    $(`#${popupId}`).remove();
  });

  // 位置类型切换
  $('input[name="position-type"]').on('change', function () {
    const positionType = $(this).val();
    if (positionType === 'custom') {
      $('#position-selection-container').show();
    } else {
      $('#position-selection-container').hide();
      $('#selected-position-info').hide();
      selectedPosition = null;
    }
  });

  // 位置选择按钮点击
  $('.position-btn').on('click', function () {
    const targetId = $(this).data('prompt-id');
    const position = $(this).data('position') as 'above' | 'below';

    // 清除之前的选择状态
    $('.position-btn').removeClass('selected').css('font-weight', 'normal');

    // 设置当前选择状态
    $(this).addClass('selected').css('font-weight', 'bold');

    selectedPosition = { targetId, position };

    // 显示选择信息
    const targetPrompt = currentPrompts.find(p => p.id === targetId);
    if (targetPrompt) {
      const positionText = position === 'above' ? '上方' : '下方';
      $('#position-description').text(`插入到"${targetPrompt.name}"的${positionText}`);
      $('#selected-position-info').show();
    }
  });

  $('#add-prompt-confirm').on('click', async () => {
    const name = $('#add-prompt-name').val()?.toString().trim();
    const content = $('#add-prompt-content').val()?.toString().trim();
    const enabled = $('#add-prompt-enabled').is(':checked');
    const positionType = $('input[name="position-type"]:checked').val();

    if (!name) {
      toastr.error('请输入条目名称');
      return;
    }

    if (!content) {
      toastr.error('请输入条目内容');
      return;
    }

    if (positionType === 'custom' && !selectedPosition) {
      toastr.error('请选择插入位置');
      return;
    }

    try {
      if (positionType === 'end' || !selectedPosition) {
        // 添加到末尾
        await addNewPrompt(name, content, enabled);
      } else {
        // 插入到指定位置
        await addNewPromptAtPosition(name, content, enabled, selectedPosition.targetId, selectedPosition.position);
      }

      $(`#${popupId}`).remove();
      toastr.success(`条目 "${name}" 创建成功`);
      onSuccess();
    } catch (error) {
      console.error('创建条目失败:', error);
      toastr.error('创建条目失败，请重试');
    }
  });
}

// 显示编辑条目弹窗
async function showEditPromptPopup(
  prompt: { id: string; name: string; element: JQuery; enabled: boolean },
  onSuccess: () => void,
): Promise<void> {
  const popupId = 'edit-prompt-popup';
  $(`#${popupId}`).remove();

  // 获取条目的当前内容
  const currentContent = await getPromptContent(prompt.id);

  const popupHtml = `
    <div id="${popupId}" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10004; display: flex; align-items: center; justify-content: center;">
      <div class="edit-prompt-popup-content" style="background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 600px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;">
        <h4 style="margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px;">编辑条目</h4>
        
        <div style="margin: 15px 0;">
          <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #6a4226;">条目名称：</label>
          <input type="text" id="edit-prompt-name" value="${$('<div/>').text(prompt.name).html()}" style="width: 100%; padding: 10px; border: 1px solid #d4b58b; border-radius: 6px; background: #fff; color: #333; font-size: 14px; margin-bottom: 15px; box-sizing: border-box;">
          
          <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #6a4226;">条目内容：</label>
          <textarea id="edit-prompt-content" style="width: 100%; height: 200px; padding: 10px; border: 1px solid #d4b58b; border-radius: 6px; background: #fff; color: #333; font-size: 14px; resize: vertical; box-sizing: border-box;">${$('<div/>').text(currentContent).html()}</textarea>
        </div>

        <div style="margin: 15px 0; padding: 12px; background-color: #fff3e0; border-radius: 8px; border-left: 4px solid #ff9800;">
          <div style="font-size: 13px; color: #f57c00; font-weight: bold; margin-bottom: 6px;">✏️ 编辑说明</div>
          <div style="font-size: 12px; color: #424242; line-height: 1.4;">
            修改条目名称和内容后，变更将立即应用到预设中。请确保内容格式正确。
          </div>
        </div>

        <div style="display: flex; justify-content: space-between; align-items: center; gap: 10px;">
          <div style="display: flex; align-items: center;">
            <input type="checkbox" id="edit-prompt-enabled" ${prompt.enabled ? 'checked' : ''} style="margin-right: 8px; transform: scale(1.2);">
            <label for="edit-prompt-enabled" style="font-size: 13px; color: #666;">启用条目</label>
          </div>
          <div style="display: flex; gap: 8px;">
            <button id="edit-prompt-cancel" style="padding: 10px 16px; background-color:#9E9E9E; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff; font-size: 14px;">取消</button>
            <button id="edit-prompt-confirm" style="padding: 10px 16px; background-color:#FF9800; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff; font-size: 14px;">保存修改</button>
          </div>
        </div>
      </div>
    </div>
    <style>
      @media (max-width: 600px) {
        #${popupId} {
          align-items: flex-start !important;
          padding: 10px;
        }
        #${popupId} .edit-prompt-popup-content {
          margin-top: 5vh !important;
          max-height: 90vh !important;
          width: 95% !important;
          padding: 15px;
          border-radius: 12px;
        }
        #${popupId} textarea {
          height: 150px !important;
        }
      }
      @media (max-width: 480px) {
        #${popupId} .edit-prompt-popup-content {
          margin-top: 2vh !important;
          max-height: 96vh !important;
          padding: 12px;
        }
        #${popupId} h4 {
          font-size: 16px !important;
        }
        #${popupId} textarea {
          height: 120px !important;
        }
      }
    </style>
  `;

  $('body').append(popupHtml);

  // 绑定事件
  $('#edit-prompt-cancel').on('click', () => {
    $(`#${popupId}`).remove();
  });

  $('#edit-prompt-confirm').on('click', async () => {
    const name = $('#edit-prompt-name').val()?.toString().trim();
    const content = $('#edit-prompt-content').val()?.toString().trim();
    const enabled = $('#edit-prompt-enabled').is(':checked');

    if (!name) {
      toastr.error('请输入条目名称');
      return;
    }

    if (!content) {
      toastr.error('请输入条目内容');
      return;
    }

    try {
      await updatePrompt(prompt.id, name, content, enabled);
      $(`#${popupId}`).remove();
      toastr.success(`条目 "${name}" 更新成功`);
      onSuccess();
    } catch (error) {
      console.error('更新条目失败:', error);
      toastr.error('更新条目失败，请重试');
    }
  });
}

// 新增条目
async function addNewPrompt(name: string, content: string, enabled: boolean): Promise<void> {
  console.log('新增条目:', name, enabled);

  // 使用酒馆助手的接口添加新条目
  await triggerSlash(`/addprompt name="${name}" content="${content}" enabled=${enabled}`);
}

// 在指定位置插入新条目
async function addNewPromptAtPosition(
  name: string,
  content: string,
  enabled: boolean,
  targetId: string,
  position: 'above' | 'below',
): Promise<void> {
  console.log('在指定位置插入新条目:', name, '位置:', targetId, position);

  // 先创建条目（添加到末尾）
  await triggerSlash(`/addprompt name="${name}" content="${content}" enabled=${enabled}`);

  // 等待一点时间确保条目创建完成
  await new Promise(resolve => setTimeout(resolve, 200));

  // 获取新创建的条目ID（通常是最后一个）
  const currentPrompts = getCurrentPresetPrompts();
  const newPrompt = currentPrompts[currentPrompts.length - 1];

  if (!newPrompt) {
    console.error('未找到新创建的条目');
    return;
  }

  console.log('新创建的条目ID:', newPrompt.id);

  // 将新条目移动到指定位置
  movePromptsToPosition([newPrompt.id], targetId, position);
}

// 获取条目内容
async function getPromptContent(promptId: string): Promise<string> {
  // 尝试从DOM中获取条目内容
  const promptElement = $(`.completion_prompt_manager_prompt[data-pm-identifier="${promptId}"]`);
  if (promptElement.length === 0) {
    console.warn('未找到条目元素:', promptId);
    return '';
  }

  // 查找条目内容元素
  const contentElement = promptElement.find('.completion_prompt_manager_prompt_content, .prompt-content, textarea');
  if (contentElement.length > 0) {
    return contentElement.text() || contentElement.val()?.toString() || '';
  }

  console.warn('未找到条目内容:', promptId);
  return '';
}

// 更新条目
async function updatePrompt(promptId: string, name: string, content: string, enabled: boolean): Promise<void> {
  console.log('更新条目:', promptId, name, enabled);

  // 使用酒馆助手的接口更新条目
  await triggerSlash(`/editprompt id="${promptId}" name="${name}" content="${content}" enabled=${enabled}`);
}

// 删除选中的条目
async function deleteSelectedPrompts(promptIds: string[]): Promise<void> {
  console.log('删除条目:', promptIds);

  for (const promptId of promptIds) {
    try {
      await triggerSlash(`/deleteprompt id="${promptId}"`);
      console.log('删除条目成功:', promptId);
    } catch (error) {
      console.error('删除条目失败:', promptId, error);
    }
  }

  toastr.success(`成功删除 ${promptIds.length} 个条目`);
}

// 在分组树中查找包含指定条目的分组
function findPromptInGroups(groups: PromptGroup[], promptId: string): PromptGroup | null {
  for (const group of groups) {
    if (group.promptIds.includes(promptId)) {
      return group;
    }

    // 递归查找子分组
    const foundInSubGroups = findPromptInGroups(group.subGroups, promptId);
    if (foundInSubGroups) {
      return foundInSubGroups;
    }
  }
  return null;
}

// 检查分组是否有有效内容（条目或子分组）
function hasValidContent(group: PromptGroup): boolean {
  return group.promptIds.length > 0 || group.subGroups.some(subGroup => hasValidContent(subGroup));
}

// 检测选中条目是否都属于同一个分组
function detectCommonParentGroup(selectedPrompts: string[], groups: PromptGroup[]): PromptGroup | null {
  if (selectedPrompts.length === 0) return null;

  // 找到第一个条目所属的分组
  const firstPromptGroup = findPromptInGroups(groups, selectedPrompts[0]);
  if (!firstPromptGroup) return null;

  // 检查其他条目是否都属于同一个分组
  for (let i = 1; i < selectedPrompts.length; i++) {
    const promptGroup = findPromptInGroups(groups, selectedPrompts[i]);
    if (!promptGroup || promptGroup.id !== firstPromptGroup.id) {
      return null; // 不是同一个分组
    }
  }

  return firstPromptGroup;
}

// 创建子分组
async function createSubGroup(
  parentGroup: PromptGroup,
  subGroupName: string,
  selectedPrompts: string[],
  existingGroups: PromptGroup[],
): Promise<void> {
  // 检查子分组名称是否与父分组的其他子分组重名
  if (parentGroup.subGroups.some(sg => sg.name === subGroupName)) {
    toastr.error(`子分组名称 "${subGroupName}" 已存在于分组 "${parentGroup.name}" 中`);
    return;
  }

  // 创建新子分组
  const newSubGroup: PromptGroup = {
    id: Date.now().toString(),
    name: subGroupName,
    promptIds: [...selectedPrompts],
    subGroups: [],
    collapsed: true,
    level: parentGroup.level + 1,
    parentId: parentGroup.id,
  };

  // 从父分组中移除这些条目
  selectedPrompts.forEach(promptId => {
    const index = parentGroup.promptIds.indexOf(promptId);
    if (index > -1) {
      parentGroup.promptIds.splice(index, 1);
    }
  });

  // 添加子分组
  parentGroup.subGroups.push(newSubGroup);

  // 更新UI
  selectedPrompts.forEach(promptId => {
    const item = $(`.prompt-item[data-prompt-id="${promptId}"]`);
    item.css('background-color', '#e8f5e8');
    const existingTag = item.find('.group-tag');
    const groupPath = getGroupPath(newSubGroup, existingGroups);
    if (existingTag.length) {
      existingTag.text(groupPath);
    } else {
      item
        .find('span:last')
        .after(
          `<span class="group-tag" style="font-size: 12px; color: #4CAF50; background: #e8f5e8; padding: 2px 6px; border-radius: 3px; margin-left: 8px;">${groupPath}</span>`,
        );
    }
  });

  toastr.success(`子分组 "${getGroupPath(newSubGroup, existingGroups)}" 创建成功，将在关闭分组界面时应用`);
}

// 创建顶级分组
async function createTopLevelGroup(
  groupName: string,
  selectedPrompts: string[],
  existingGroups: PromptGroup[],
): Promise<void> {
  // 创建新的顶级分组
  const newGroup: PromptGroup = {
    id: Date.now().toString(),
    name: groupName,
    promptIds: [...selectedPrompts],
    subGroups: [],
    collapsed: true,
    level: 0,
  };

  existingGroups.push(newGroup);

  // 更新UI
  selectedPrompts.forEach(promptId => {
    const item = $(`.prompt-item[data-prompt-id="${promptId}"]`);
    item.css('background-color', '#e8f5e8');
    const existingTag = item.find('.group-tag');
    if (existingTag.length) {
      existingTag.text(groupName);
    } else {
      item
        .find('span:last')
        .after(
          `<span class="group-tag" style="font-size: 12px; color: #4CAF50; background: #e8f5e8; padding: 2px 6px; border-radius: 3px; margin-left: 8px;">${groupName}</span>`,
        );
    }
  });

  toastr.success(`分组 "${groupName}" 创建成功，将在关闭分组界面时应用`);
}

// 获取分组的完整路径
function getGroupPath(group: PromptGroup, allGroups: PromptGroup[]): string {
  const path: string[] = [];
  let currentGroup: PromptGroup | null = group;

  while (currentGroup) {
    path.unshift(currentGroup.name);

    if (currentGroup.parentId) {
      currentGroup = findGroupById(allGroups, currentGroup.parentId);
    } else {
      break;
    }
  }

  return path.join('/');
}

// 根据ID查找分组（递归查找）
function findGroupById(groups: PromptGroup[], groupId: string): PromptGroup | null {
  for (const group of groups) {
    if (group.id === groupId) {
      return group;
    }

    const foundInSubGroups = findGroupById(group.subGroups, groupId);
    if (foundInSubGroups) {
      return foundInSubGroups;
    }
  }

  return null;
}

// 显示分组选择弹窗
async function showGroupSelectionPopup(
  selectedPrompts: string[],
  existingGroups: PromptGroup[],
): Promise<void> {
  const popupId = 'group-selection-popup';
  $(`#${popupId}`).remove();

  if (existingGroups.length === 0) {
    toastr.warning('当前没有可用的分组，请先创建分组');
    return;
  }

  // 生成分组列表HTML
  const groupsHtml = generateGroupsListHtml(existingGroups, 0);

  const popupHtml = `
    <div id="${popupId}" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10002; display: flex; align-items: center; justify-content: center;">
      <div style="background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 500px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;">
        <h4 style="margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px;">选择目标分组</h4>
        <div style="flex: 1; min-height: 0; overflow-y: auto; margin: 15px 0;">
          <div style="font-size: 13px; color: #666; margin-bottom: 12px; line-height: 1.4;">
            请选择要将 ${selectedPrompts.length} 个条目加入的分组：
          </div>
          <div id="groups-list" style="max-height: 300px; overflow-y: auto;">
            ${groupsHtml}
          </div>
        </div>
        <div style="text-align: right; margin-top: 15px; flex-shrink: 0;">
          <button id="group-selection-cancel" style="padding: 8px 16px; background-color:#bcaaa4; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c; margin-right: 10px;">取消</button>
        </div>
      </div>
    </div>
  `;

  $('body').append(popupHtml);

  // 绑定事件
  $('#group-selection-cancel').on('click', () => {
    $(`#${popupId}`).remove();
  });

  // 绑定分组选择事件
  $('.group-option').on('click', async function() {
    const groupId = $(this).data('group-id');
    const group = findGroupById(existingGroups, groupId);
    
    if (group) {
      await addPromptsToGroup(selectedPrompts, group, existingGroups);
      $(`#${popupId}`).remove();
      
      // 重新加载分组界面
      setTimeout(() => {
        $('#preset-manager-grouping-popup').remove();
        showPromptGroupingUI();
      }, 100);
    }
  });
}

// 生成分组列表HTML
function generateGroupsListHtml(groups: PromptGroup[], level: number): string {
  let html = '';
  
  groups.forEach(group => {
    const indent = '  '.repeat(level);
    const hasContent = group.promptIds.length > 0 || group.subGroups.length > 0;
    
    if (hasContent) {
      html += `
        <div class="group-option" data-group-id="${group.id}" 
             style="padding: 10px; margin: 5px 0; border: 1px solid #e0e0e0; border-radius: 6px; cursor: pointer; background-color: #f9f9f9; transition: background-color 0.2s; margin-left: ${level * 20}px;">
          <div style="font-weight: bold; color: #333; font-size: 14px;">
            ${$('<div/>').text(group.name).html()}
          </div>
          <div style="font-size: 12px; color: #666; margin-top: 4px;">
            条目数量: ${group.promptIds.length} | 子分组: ${group.subGroups.length}
          </div>
        </div>
      `;
    }
    
    // 递归处理子分组
    if (group.subGroups.length > 0) {
      html += generateGroupsListHtml(group.subGroups, level + 1);
    }
  });
  
  return html;
}

// 将条目加入指定分组
async function addPromptsToGroup(
  selectedPrompts: string[],
  targetGroup: PromptGroup,
  existingGroups: PromptGroup[],
): Promise<void> {
  // 检查条目是否已经在目标分组中
  const alreadyInGroup = selectedPrompts.filter(promptId => 
    targetGroup.promptIds.includes(promptId)
  );

  if (alreadyInGroup.length > 0) {
    toastr.warning(`有 ${alreadyInGroup.length} 个条目已在该分组中，将跳过`);
  }

  // 将条目添加到目标分组
  const newPrompts = selectedPrompts.filter(promptId => 
    !targetGroup.promptIds.includes(promptId)
  );

  targetGroup.promptIds.push(...newPrompts);

  // 更新UI
  newPrompts.forEach(promptId => {
    const item = $(`.prompt-item[data-prompt-id="${promptId}"]`);
    item.css('background-color', '#e8f5e8');
    
    // 更新或添加分组标签
    const existingTag = item.find('.group-tag');
    const groupPath = getGroupPath(targetGroup, existingGroups);
    if (existingTag.length) {
      existingTag.text(groupPath);
    } else {
      item
        .find('.prompt-text')
        .append(
          `<div style="color: #666; font-size: 12px; margin-top: 4px; word-wrap: break-word; overflow-wrap: break-word;">📁 ${groupPath}</div>`
        );
      item.append(
        `<span class="group-tag" style="background-color: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; margin-left: 8px; flex-shrink: 0; align-self: flex-start; margin-top: 2px;">已分组</span>`
      );
    }
  });

  toastr.success(`已将 ${newPrompts.length} 个条目加入分组 "${getGroupPath(targetGroup, existingGroups)}"，将在关闭分组界面时应用`);
}

// 将条目从分组中移除
async function removePromptsFromGroups(
  selectedPrompts: string[],
  existingGroups: PromptGroup[],
): Promise<void> {
  selectedPrompts.forEach(promptId => {
    const group = findPromptInGroups(existingGroups, promptId);
    if (group) {
      // 从分组中移除条目
      const index = group.promptIds.indexOf(promptId);
      if (index > -1) {
        group.promptIds.splice(index, 1);
      }

      // 更新UI
      const item = $(`.prompt-item[data-prompt-id="${promptId}"]`);
      item.css('background-color', '#fff');
      item.find('.group-tag').remove();
      item.find('.prompt-text div:last-child').remove(); // 移除分组路径显示
    }
  });

  toastr.success(`已将 ${selectedPrompts.length} 个条目移出分组，将在关闭分组界面时应用`);
}
