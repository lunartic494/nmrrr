{
  "id": "d8309e9d-4ca9-4551-8b60-fe7b7ec309c1",
  "name": "喵喵预设配置管理",
  "content": "(function() {\n    'use strict';\n\n    // 定义用于存储配置的世界书的固定名称\n    const CONFIG_LOREBOOK_NAME = 'PresetConfigManager_Data';\n    const V2_MIGRATION_KEY = 'MiaoMiaoPresetManager_AllConfigs_V2'; // 用于检测旧版合并数据的Key\n    const TOGGLE_BUTTON_NAME = '喵喵预设配置管理';\n    const UI_ID = 'preset-manager-ui';\n    let lastProcessedCharAvatar = null; // 用于跟踪上一个处理过的角色，防止重复触发\n\n    // 小贴士列表\n    const TIPS = [\n        '如果你玩BL的话，来试试小n同人女预设吧！其他MoM系预设也可以试试哦！',\n        '当你的总token达到6w左右时，你就该总结隐藏了哦',\n        '你知道吗，聊天界面开关正则有一定可能丢失你的聊天记录',\n        '不要使用第三方/“半公益站”的api或云酒馆！首先你的数据会非常不安全，其次没有后台我们无法解答你的问题，最后贩子不仅收你钱还掺水！'\n    ];\n\n    function generateUniqueId() {\n        return Date.now().toString(36) + Math.random().toString(36).substring(2);\n    }\n\n    function createUI() {\n        if ($(`#${UI_ID}`).length > 0) return;\n\n        const uiContainer = $(`\n            <div id=\"${UI_ID}\">\n                <style>\n                    #${UI_ID}{display:none;position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);z-index:10000;background-color:#fff8f0;color:#3a2c2c;border:1px solid #e0c9a6;border-radius:16px;padding:20px;box-shadow:0 4px 25px rgba(120,90,60,.25);width:90%;max-width:550px;max-height:80vh;font-family:'Segoe UI',sans-serif;display:flex;flex-direction:column}#${UI_ID} h4{margin-top:0;border-bottom:2px solid #f0d8b6;padding-bottom:10px;color:#6a4226}#${UI_ID} h5{margin:8px 0;color:#7a5235}#${UI_ID} button{transition:all .2s ease}#${UI_ID} button:hover{opacity:.85}#${UI_ID} #preset-manager-list-section{flex:1;overflow-y:auto}@media (max-width:600px){#${UI_ID}{top:0;left:0;transform:none;width:100%;height:100vh;max-width:none;max-height:none;border-radius:0;padding:10px;box-shadow:none;display:flex;flex-direction:column}#${UI_ID} h4{font-size:18px;text-align:center;padding:12px 0;margin:0;border-bottom:2px solid #f0d8b6}#${UI_ID} #preset-manager-close{top:10px;right:10px;font-size:28px}#${UI_ID} #preset-manager-save-section{flex-wrap:wrap}#${UI_ID} #preset-manager-name-input{width:100%;margin-left:0;margin-bottom:10px}}\n                    .pm-switch{position:relative;display:inline-block;width:40px;height:20px;flex-shrink:0}.pm-switch input{opacity:0;width:0;height:0}.pm-slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s;border-radius:20px}.pm-slider:before{position:absolute;content:\"\";height:16px;width:16px;left:2px;bottom:2px;background-color:#fff;transition:.4s;border-radius:50%}input:checked+.pm-slider{background-color:#4CAF50}input:checked+.pm-slider:before{transform:translateX(20px)}\n                    #preset-manager-tips-section { margin-top: 15px; padding: 10px; background-color: #f9f3ea; border-radius: 8px; font-size: 12px; color: #7a5235; text-align: center; flex-shrink: 0; }\n                    .pm-config-group summary { cursor: pointer; padding: 8px; background-color: #f7f0e4; border-radius: 6px; margin-top: 5px; font-weight: bold; } .pm-config-group summary:hover { background-color: #f0e2d0; } .pm-config-count { color: #888; font-weight: normal; margin-left: 5px; } .pm-config-sublist { list-style: none; padding-left: 15px; border-left: 2px solid #f0e2d0; margin-left: 8px; }\n                    .pm-actions-container { display: flex; align-items: center; gap: 5px; justify-content: flex-end; }\n                    .pm-actions-container > button, .pm-more-btn-wrapper > button { flex-shrink: 0; padding: 6px 12px; font-size: 13px; font-weight: 500; border-radius: 6px; cursor: pointer; border: none; }\n                    .pm-more-btn-wrapper { position: relative; }\n                    .pm-submenu { display: none; position: absolute; right: 0; top: calc(100% + 5px); background-color: #fff; border: 1px solid #e0c9a6; border-radius: 8px; box-shadow: 0 3px 15px rgba(120,90,60,.15); z-index: 10003; padding: 5px; min-width: 100px; }\n                    .pm-submenu button { display: block; width: 100%; text-align: left; padding: 8px 12px; border: none; background: none; font-size: 13px; border-radius: 4px; color: #3a2c2c; cursor: pointer; }\n                    .pm-submenu button:hover { background-color: #f0e2d0; }\n                </style>\n\n                <h4>喵喵预设配置管理by小n</h4>\n                <button id=\"preset-manager-close\" style=\"position:absolute; top:12px; right:16px; background:none; border:none; color:#9a6b4f; font-size:24px; cursor:pointer;\">&times;</button>\n                \n                <div id=\"preset-manager-save-section\" style=\"margin-bottom: 20px; margin-top:15px;\">\n                    <div style=\"display:flex; flex-wrap: wrap; align-items:center;\">\n                        <label for=\"preset-manager-name-input\" style=\"font-weight:bold; flex-shrink:0;\">配置名称:</label>\n                        <input type=\"text\" id=\"preset-manager-name-input\" placeholder=\"例如：仅破限\" style=\"flex:1; min-width: 100px; margin-left: 10px; background-color: #fff; border: 1px solid #d4b58b; color:#3a2c2c; padding: 6px 8px; border-radius: 6px; font-size:14px;\" />\n                        <button id=\"preset-manager-save-btn\" style=\"margin-left: 10px; padding:6px 12px; background-color:#f4c78e; border:none; border-radius:6px; color:#3a2c2c; cursor:pointer; font-weight:bold;\">保存</button>\n                    </div>\n                    <div style=\"margin-top: 10px; display:flex; flex-wrap: wrap; gap: 10px; align-items:center;\">\n                        <button id=\"preset-manager-import-btn\" style=\"padding:6px 12px; background-color:#a5d6f9; border:none; border-radius:6px; color:#3a2c2c; cursor:pointer; font-weight:bold;\">导入</button>\n                        <button id=\"preset-manager-batch-export-btn\" style=\"padding:6px 12px; background-color:#81c784; border:none; border-radius:6px; color:#3a2c2c; cursor:pointer; font-weight:bold;\">批量导出</button>\n                        <button id=\"preset-manager-batch-delete-btn\" style=\"padding:6px 12px; background-color:#ef9a9a; border:none; border-radius:6px; color:#fff; cursor:pointer; font-weight:bold;\">批量删除</button>\n                        <button id=\"preset-manager-help-btn\" style=\"padding:6px 12px; background-color:#bcaaa4; border:none; border-radius:6px; color:#3a2c2c; cursor:pointer; font-weight:bold;\">使用说明</button>\n                        <div style=\"width:100%; margin-top:10px; display:flex; align-items:center; padding-left: 5px;\">\n                           <label for=\"preset-manager-bind-char\" style=\"cursor:pointer;\">绑定到当前角色</label>\n                           <label class=\"pm-switch\" style=\"margin-left: auto;\">\n                              <input type=\"checkbox\" id=\"preset-manager-bind-char\"/>\n                              <span class=\"pm-slider\"></span>\n                           </label>\n                        </div>\n                    </div>\n                </div>\n\n                <div id=\"preset-manager-list-section\">\n                    <h5>已保存的配置:</h5>\n                    <ul id=\"preset-manager-list\" style=\"list-style:none; padding:0; margin:0;\"></ul>\n                </div>\n\n                <div id=\"preset-manager-tips-section\"></div>\n            </div>\n        `);\n        $('body').append(uiContainer);\n        $('body').append('<input type=\"file\" id=\"preset-manager-import-file\" accept=\".json\" style=\"display:none;\">');\n        \n        $(`#${UI_ID}`).hide();\n\n        $('#preset-manager-close').on('click', toggleUI);\n        $('#preset-manager-help-btn').on('click', showHelpPopup);\n        $('#preset-manager-save-btn').on('click', saveCurrentConfig);\n        $('#preset-manager-import-btn').on('click', () => $('#preset-manager-import-file').click());\n        $('#preset-manager-batch-export-btn').on('click', showBatchExportPopup);\n        $('#preset-manager-batch-delete-btn').on('click', showBatchDeletePopup);\n        $('#preset-manager-import-file').on('change', handleFileImport);\n    }\n\n    function toggleUI() {\n        const ui = $(`#${UI_ID}`);\n        if (ui.is(':visible')) {\n            ui.fadeOut();\n        } else {\n            renderConfigsList();\n            const randomTip = TIPS[Math.floor(Math.random() * TIPS.length)];\n            $('#preset-manager-tips-section').text('小贴士：' + randomTip);\n            ui.fadeIn();\n        }\n    }\n\n    async function getStoredConfigs() {\n        let worldbookEntries;\n        try {\n            worldbookEntries = await TavernHelper.getWorldbook(CONFIG_LOREBOOK_NAME);\n        } catch (error) {\n            return {};\n        }\n\n        const v2Entry = worldbookEntries.find(entry => entry.strategy?.keys?.includes(V2_MIGRATION_KEY));\n        if (v2Entry) {\n            console.log(\"喵喵预设配置管理: 检测到旧版合并数据，正在迁移...\");\n            try {\n                const configsArray = JSON.parse(v2Entry.content);\n                const migratedEntries = configsArray.map(config => ({\n                    name: config.name || config.id,\n                    strategy: { type: 'constant', keys: [config.id] },\n                    content: JSON.stringify(config),\n                    enabled: false\n                }));\n\n                const otherEntries = worldbookEntries.filter(entry => !entry.strategy?.keys?.includes(V2_MIGRATION_KEY));\n                await TavernHelper.createOrReplaceWorldbook(CONFIG_LOREBOOK_NAME, [...otherEntries, ...migratedEntries]);\n                toastr.info(\"喵喵预设配置管理：已自动升级数据格式。\");\n                worldbookEntries = await TavernHelper.getWorldbook(CONFIG_LOREBOOK_NAME);\n            } catch (e) {\n                console.error(\"迁移配置失败:\", e);\n                toastr.error(\"自动迁移配置数据失败，请检查控制台。\");\n            }\n        }\n\n        const configs = {};\n        for (const entry of worldbookEntries) {\n            try {\n                const configData = JSON.parse(entry.content);\n                if (configData.id && configData.name && Array.isArray(configData.states)) {\n                    configs[configData.id] = configData;\n                }\n            } catch (e) {}\n        }\n        return configs;\n    }\n    \n    async function setStoredConfigs(configsObject) {\n        try {\n            const nameCounts = {};\n            const entries = Object.values(configsObject).map(config => {\n                let entryName = config.name;\n                nameCounts[entryName] = (nameCounts[entryName] || 0) + 1;\n                if (nameCounts[entryName] > 1) {\n                    entryName = `${entryName} (${config.id.slice(-5)})`;\n                }\n                return {\n                    name: entryName,\n                    strategy: { type: 'constant', keys: [config.id] },\n                    content: JSON.stringify(config),\n                    enabled: false,\n                    comment: `MiaoMiao Preset Config: ${config.name} (ID: ${config.id})`\n                };\n            });\n            await TavernHelper.createOrReplaceWorldbook(CONFIG_LOREBOOK_NAME, entries);\n        } catch (error) {\n            console.error(\"写入配置到世界书失败:\", error);\n            toastr.error(\"配置保存/更新失败，请检查控制台日志。\");\n        }\n    }\n\n    async function renderConfigsList() {\n        const configsObject = await getStoredConfigs();\n        const configs = Object.values(configsObject);\n        const listElement = $('#preset-manager-list');\n        listElement.empty();\n    \n        if (configs.length === 0) {\n            listElement.append('<li style=\\\"color:#888; padding:10px;\\\">暂无已保存的配置。</li>');\n            return;\n        }\n    \n        const groupedConfigs = configs.reduce((acc, config) => {\n            const groupName = config.presetName || '未分类';\n            if (!acc[groupName]) acc[groupName] = [];\n            acc[groupName].push(config);\n            return acc;\n        }, {});\n    \n        const sortedGroupNames = Object.keys(groupedConfigs).sort((a, b) => {\n            if (a === '未分类') return 1;\n            if (b === '未分类') return -1;\n            return a.localeCompare(b);\n        });\n    \n        for (const groupName of sortedGroupNames) {\n            const configsInGroup = groupedConfigs[groupName];\n            const safeGroupName = $('<div/>').text(groupName).html();\n            const isUncategorized = groupName === '未分类';\n    \n            const groupElement = $(`\n                <details class=\\\"pm-config-group\\\" ${isUncategorized ? 'open' : ''}>\n                    <summary class=\\\"pm-config-group-summary\\\">${safeGroupName} <span class=\\\"pm-config-count\\\">(${configsInGroup.length})</span></summary>\n                    <ul class=\\\"pm-config-sublist\\\"></ul>\n                </details>\n            `);\n            const sublist = groupElement.find('.pm-config-sublist');\n    \n            for (const configData of configsInGroup) {\n                const boundCharDisplay = configData.boundCharName ? `<span style=\\\"color:#4CAF50; margin-left: 8px; font-weight:bold;\\\">(绑定: ${configData.boundCharName})</span>` : '';\n                \n                const listItem = $(`\n                    <li style=\\\"display:flex; justify-content:space-between; align-items:center; padding:10px; border-bottom: 1px solid #f0e2d0; font-size:14px;\\\">\n                        <div style=\\\"display:flex; flex-direction:column; align-items:flex-start; overflow:hidden; margin-right: 10px; flex: 1; min-width: 0;\\\">\n                            <span style=\\\"font-weight:bold; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; max-width: 100%;\\\" title=\\\"${$('<div/>').text(configData.name).html()}\\\">${$('<div/>').text(configData.name).html()}${boundCharDisplay}</span>\n                        </div>\n                        <div class=\\\"pm-actions-container\\\">\n                            <button data-id=\\\"${configData.id}\\\" name=\\\"load-config\\\" style=\\\"background-color:#f9d6a5; color:#3a2c2c;\\\">加载</button>\n                            <button data-id=\\\"${configData.id}\\\" name=\\\"delete-config\\\" style=\\\"background-color:#f5a8a0; color:#fff;\\\">删除</button>\n                            <div class=\\\"pm-more-btn-wrapper\\\">\n                                <button name=\\\"more-actions\\\" style=\\\"background-color:#b0bec5; color:#fff;\\\">更多</button>\n                                <div class=\\\"pm-submenu\\\">\n                                    <button data-id=\\\"${configData.id}\\\" name=\\\"update-config\\\">更新</button>\n                                    <button data-id=\\\"${configData.id}\\\" name=\\\"rename-config\\\">重命名</button>\n                                    <button data-id=\\\"${configData.id}\\\" name=\\\"bind-regex\\\">正则</button>\n                                    <button data-id=\\\"${configData.id}\\\" name=\\\"export-config\\\">导出</button>\n                                    <div style=\\\"border-top: 1px solid #eee; margin: 5px 0;\\\"></div>\n                                    <button name=\\\"close-submenu\\\" style=\\\"color: #888; text-align: center;\\\">关闭</button>\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                `);\n                sublist.append(listItem);\n            }\n            listElement.append(groupElement);\n        }\n    \n        listElement.off('click', 'button').on('click', 'button', function(e) {\n            const button = $(this);\n            const action = button.attr('name');\n        \n            if (action === 'more-actions') {\n                e.stopPropagation();\n                const submenu = button.siblings('.pm-submenu');\n                $('.pm-submenu').not(submenu).hide(); // Hide other open menus\n                submenu.toggle();\n                return;\n            }\n\n            if (action === 'close-submenu') {\n                button.closest('.pm-submenu').hide();\n                return;\n            }\n            \n            const configId = button.data('id');\n            switch (action) {\n                case 'rename-config': renameConfig(configId); break;\n                case 'update-config': updateConfig(configId); break;\n                case 'load-config': loadConfig(configId); break;\n                case 'export-config': exportConfig(configId); break;\n                case 'delete-config': deleteConfig(configId); break;\n                case 'bind-regex': showRegexBindingPopup(configId); break;\n            }\n        \n            button.closest('.pm-submenu').hide();\n        });\n    }\n\n    async function showRegexBindingPopup(configId) {\n        const popupId = 'preset-manager-regex-popup';\n        $(`#${popupId}`).remove();\n    \n        try {\n            const allRegexes = await TavernHelper.getTavernRegexes({ scope: 'global' });\n            if (allRegexes.length === 0) {\n                toastr.info('没有可绑定的全局正则。');\n                return;\n            }\n    \n            let configs = await getStoredConfigs();\n            const currentConfig = configs[configId];\n            if (!currentConfig) return;\n            const savedStates = new Map(currentConfig.regexStates?.map(r => [r.id, r.enabled]) ?? []);\n    \n            const regexesHtml = allRegexes.map(regex => {\n                const isChecked = savedStates.has(regex.id) ? savedStates.get(regex.id) : regex.enabled;\n                const safeName = $('<div/>').text(regex.script_name).html();\n                return `\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; padding: 10px 5px; border-bottom: 1px solid #eee;\">\n                        <label for=\"regex-toggle-${regex.id}\" style=\"cursor: pointer; flex: 1; margin-right: 10px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\" title=\"${safeName}\">${safeName}</label>\n                        <label class=\"pm-switch\">\n                           <input type=\"checkbox\" id=\"regex-toggle-${regex.id}\" data-id=\"${regex.id}\" ${isChecked ? 'checked' : ''}/>\n                           <span class=\"pm-slider\"></span>\n                        </label>\n                    </div>\n                `;\n            }).join('');\n    \n            const popupHtml = `\n                <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;\">\n                    <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 450px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                        <h4 style=\"margin-top:0; color:#c62828; text-align: center;\">请选择绑定正则</h4>\n                        <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin: 15px 0; border-top: 1px solid #f0e2d0; border-bottom: 1px solid #f0e2d0; padding: 5px 10px;\">\n                            ${regexesHtml}\n                        </div>\n                        <div style=\"text-align: right; display:flex; justify-content:flex-end; gap: 10px;\">\n                            <button id=\"regex-bind-clear\" style=\"padding: 8px 16px; background-color:#f5a8a0; border:none; border-radius:6px; cursor:pointer; color:#fff;\">清除绑定</button>\n                            <button id=\"regex-bind-cancel\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333;\">取消</button>\n                            <button id=\"regex-bind-save\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">保存</button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            $('body').append(popupHtml);\n            const mobileStyles = `<style>@media (max-width: 600px) { #${popupId} { align-items: flex-start !important; } #${popupId} > div { margin-top: 5vh; } }</style>`;\n            $(`#${popupId}`).append(mobileStyles);\n    \n            $('#regex-bind-cancel').on('click', () => $(`#${popupId}`).remove());\n            \n            $('#regex-bind-clear').on('click', async () => {\n                let configs = await getStoredConfigs();\n                if (configs[configId] && configs[configId].regexStates) {\n                    delete configs[configId].regexStates;\n                    await setStoredConfigs(configs);\n                    toastr.success(`配置 \\\"${configs[configId].name}\\\" 的正则绑定已清除。`);\n                } else {\n                    toastr.info(`配置没有正则绑定。`);\n                }\n                $(`#${popupId}`).remove();\n                renderConfigsList();\n            });\n\n            $('#regex-bind-save').on('click', async () => {\n                const newRegexStates = allRegexes.map(regex => ({\n                    id: regex.id,\n                    enabled: $(`#regex-toggle-${regex.id}`).is(':checked')\n                }));\n    \n                let configs = await getStoredConfigs();\n                if (!configs[configId]) return;\n\n                configs[configId].regexStates = newRegexStates;\n                await setStoredConfigs(configs);\n                \n                toastr.success(`配置 \\\"${configs[configId].name}\\\" 的正则绑定已保存。`);\n                $(`#${popupId}`).remove();\n                renderConfigsList();\n\n                const currentPresetName = configs[configId].presetName;\n                if (!currentPresetName) return;\n\n                const otherConfigIds = Object.keys(configs).filter(id => id !== configId && configs[id].presetName === currentPresetName);\n\n                if (otherConfigIds.length > 0) {\n                    const confirmMessage = `是否要将此正则绑定应用到其他使用预设 \\\"${currentPresetName}\\\" 的 ${otherConfigIds.length} 个配置上？`;\n                    const userChoice = await triggerSlash(`/popup okButton=\\\"应用\\\" cancelButton=\\\"取消\\\" result=true \\\"${confirmMessage}\\\"`);\n                    \n                    if (userChoice === '1') {\n                        otherConfigIds.forEach(id => {\n                            configs[id].regexStates = newRegexStates;\n                        });\n                        await setStoredConfigs(configs);\n                        toastr.success(`已成功将正则绑定应用到 ${otherConfigIds.length} 个同名预设配置上。`);\n                    }\n                }\n            });\n    \n        } catch (error) {\n            console.error('打开正则绑定界面失败:', error);\n            toastr.error('无法加载全局正则列表。');\n        }\n    }\n    \n    function showNewEntriesPopup(newEntries, promptIdToNameMap) {\n        return new Promise(resolve => {\n            const popupId = 'preset-manager-new-entries-popup';\n            $(`#${popupId}`).remove();\n\n            const entriesHtml = newEntries.map((entry, index) => {\n                const entryName = promptIdToNameMap.get(entry.id) || `未知条目 (ID: ${entry.id})`;\n                const isChecked = entry.enabled ? 'checked' : '';\n                const safeEntryName = $('<div/>').text(entryName).html();\n                return `\n                    <div class=\"entry-item\" style=\"display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #eee;\">\n                        <label for=\"new-entry-toggle-${index}\" style=\"cursor: pointer; flex: 1; margin-right: 10px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\" title=\"${safeEntryName}\">${safeEntryName}</label>\n                        <label class=\"pm-switch\">\n                           <input type=\"checkbox\" id=\"new-entry-toggle-${index}\" data-id=\"${entry.id}\" ${isChecked}/>\n                           <span class=\"pm-slider\"></span>\n                        </label>\n                    </div>\n                `;\n            }).join('');\n\n            const popupHtml = `\n                <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;\">\n                    <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 450px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 90vh; box-sizing: border-box;\">\n                        <h4 style=\"margin-top:0; color:#6a4226; text-align: center;\">检测到新条目</h4>\n                        <p style=\"font-size: 14px; color: #6a4226; margin: 10px 0; flex-shrink: 0;\">请选择以下新增条目的默认启用状态(勾选为需要启用)：</p>\n                        <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 20px; border-top: 1px solid #f0e2d0; border-bottom: 1px solid #f0e2d0; padding: 5px 10px;\">\n                            ${entriesHtml}\n                        </div>\n                        <div class=\"button-container\" style=\"text-align: right; margin-top: auto; flex-shrink: 0; display:flex; justify-content:flex-end;\">\n                            <button id=\"new-entries-cancel\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333; margin-right: 10px;\">取消</button>\n                            <button id=\"new-entries-confirm\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">确认</button>\n                        </div>\n                    </div>\n                </div>\n            `;\n\n            $('body').append(popupHtml);\n\n            const mobileStyles = `<style>@media (max-width: 600px) {#${popupId} { align-items: flex-start !important; } #${popupId} > div{ margin-top: 5vh; width: 95% !important;max-width: none !important;height: auto !important;max-height: 85vh !important;border-radius: 12px !important;padding: 15px !important;}#${popupId} h4{font-size: 18px !important;margin-bottom: 10px !important;}#${popupId} p{font-size: 14px !important;margin: 5px 0 15px 0 !important;}#${popupId} .entry-item{padding: 10px 0 !important;}#${popupId} .button-container{flex-direction: row !important;gap: 10px !important;justify-content: flex-end;}#${popupId} .button-container button{width: auto !important;margin: 0 !important;flex-grow: 1;}}</style>`;\n            $(`#${popupId}`).append(mobileStyles);\n\n            $('#new-entries-confirm').on('click', () => {\n                const updatedEntries = newEntries.map((entry, index) => ({ ...entry, enabled: $(`#new-entry-toggle-${index}`).is(':checked') }));\n                $(`#${popupId}`).remove();\n                resolve(updatedEntries);\n            });\n\n            $('#new-entries-cancel').on('click', () => {\n                $(`#${popupId}`).remove();\n                resolve(null);\n            });\n        });\n    }\n\n    function showConfigSelectionPopup(configs, charName) {\n        return new Promise(resolve => {\n            const popupId = 'preset-manager-config-selection-popup';\n            $(`#${popupId}`).remove();\n\n            const configsHtml = configs.map((config, index) => {\n                const safeName = $('<div/>').text(config.name).html();\n                return `\n                    <div class=\"config-item\" style=\"padding: 10px 5px; border-bottom: 1px solid #eee; cursor: pointer; border-radius: 4px; display: flex; align-items: center;\">\n                        <input type=\"radio\" id=\"config-select-${index}\" name=\"config-selection\" value=\"${config.id}\" style=\"margin-right: 10px; transform: scale(1.2);\">\n                        <label for=\"config-select-${index}\" style=\"cursor: pointer; width: 100%;\">${safeName}</label>\n                    </div>\n                `;\n            }).join('');\n\n            const popupHtml = `\n                <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;\">\n                    <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 400px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 90vh;\">\n                        <h4 style=\"margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px;\">选择配置</h4>\n                        <p style=\"font-size: 14px; color: #6a4226; margin: 15px 0; text-align: center;\">角色 \\\"${$('<div/>').text(charName).html()}\\\" 绑定了多个配置，请选择一个进行加载：</p>\n                        <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 20px; padding: 5px;\">\n                            ${configsHtml}\n                        </div>\n                        <div style=\"text-align: right; display:flex; justify-content:flex-end; gap: 10px;\">\n                            <button id=\"config-select-cancel\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333;\">取消</button>\n                            <button id=\"config-select-confirm\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">加载</button>\n                        </div>\n                    </div>\n                </div>\n            `;\n\n            $('body').append(popupHtml);\n            const mobileStyles = `<style> @media (max-width: 600px) { #${popupId} { align-items: flex-start !important; } #${popupId} > div { margin-top: 5vh; max-height: 85vh !important; } }</style>`;\n            $(`#${popupId}`).append(mobileStyles);\n\n            if (configs.length > 0) $(`#config-select-0`).prop('checked', true);\n            \n            $(`#${popupId} .config-item`).on('click', function() { $(this).find('input[type=\\\"radio\\\"]').prop('checked', true); });\n\n            $('#config-select-confirm').on('click', () => {\n                const selectedId = $('input[name=\\\"config-selection\\\"]:checked').val();\n                if (selectedId) { $(`#${popupId}`).remove(); resolve(selectedId); } \n                else { toastr.warning(\"请选择一个配置。\"); }\n            });\n\n            $('#config-select-cancel').on('click', () => { $(`#${popupId}`).remove(); resolve(null); });\n        });\n    }\n\n    async function showRegexExportSelectionPopup(boundRegexes) {\n        return new Promise(resolve => {\n            const popupId = 'preset-manager-regex-export-popup';\n            $(`#${popupId}`).remove();\n\n            const regexesHtml = boundRegexes.map(regex => {\n                const safeName = $('<div/>').text(regex.script_name).html();\n                return `\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; padding: 10px 5px; border-bottom: 1px solid #eee;\">\n                        <label for=\"regex-export-toggle-${regex.id}\" style=\"cursor: pointer; flex: 1; margin-right: 10px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\" title=\"${safeName}\">${safeName}</label>\n                        <label class=\"pm-switch\">\n                           <input type=\"checkbox\" class=\"regex-export-checkbox\" id=\"regex-export-toggle-${regex.id}\" data-id=\"${regex.id}\" checked/>\n                           <span class=\"pm-slider\"></span>\n                        </label>\n                    </div>\n                `;\n            }).join('');\n\n            const popupHtml = `\n                <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;\">\n                    <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 450px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                        <h4 style=\"margin-top:0; color:#6a4226; text-align: center;\">选择要导出的正则</h4>\n                        <div style=\"margin: 10px 0; display: flex; justify-content: space-around;\">\n                           <button id=\"regex-export-select-all\" style=\"padding: 6px 12px; background-color:#a5d6f9; border:none; border-radius:6px; cursor:pointer;\">全选</button>\n                           <button id=\"regex-export-deselect-all\" style=\"padding: 6px 12px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer;\">全不选</button>\n                        </div>\n                        <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 20px; border-top: 1px solid #f0e2d0; border-bottom: 1px solid #f0e2d0; padding: 5px 10px;\">\n                            ${regexesHtml}\n                        </div>\n                        <div style=\"text-align: right; display:flex; justify-content:flex-end; gap: 10px;\">\n                            <button id=\"regex-export-cancel\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333;\">取消</button>\n                            <button id=\"regex-export-confirm\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">确认导出</button>\n                        </div>\n                    </div>\n                </div>\n            `;\n\n            $('body').append(popupHtml);\n            const mobileStyles = `<style>@media (max-width: 600px) { #${popupId} { align-items: flex-start !important; } #${popupId} > div { margin-top: 5vh; } }</style>`;\n            $(`#${popupId}`).append(mobileStyles);\n\n            $('#regex-export-select-all').on('click', () => $('.regex-export-checkbox').prop('checked', true));\n            $('#regex-export-deselect-all').on('click', () => $('.regex-export-checkbox').prop('checked', false));\n            $('#regex-export-cancel').on('click', () => {\n                $(`#${popupId}`).remove();\n                resolve(null);\n            });\n            $('#regex-export-confirm').on('click', () => {\n                const selectedIds = new Set();\n                $('.regex-export-checkbox:checked').each(function() {\n                    selectedIds.add($(this).data('id'));\n                });\n                const selectedRegexes = boundRegexes.filter(r => selectedIds.has(r.id));\n                $(`#${popupId}`).remove();\n                resolve(selectedRegexes);\n            });\n        });\n    }\n    \n    async function renameConfig(configId) {\n        let configs = await getStoredConfigs();\n        const configToRename = configs[configId];\n        if (!configToRename) {\n            toastr.error(\"找不到要重命名的配置。\");\n            return;\n        }\n\n        const oldName = configToRename.name;\n        const newName = await triggerSlash(`/input default=\\\"${oldName}\\\" \\\"请输入新的配置名称\\\"`);\n\n        if (newName && newName.trim() !== '') {\n            configs[configId].name = newName.trim();\n            await setStoredConfigs(configs);\n            toastr.success(`配置已从 \\\"${oldName}\\\" 重命名为 \\\"${newName.trim()}\\\"。`);\n            await renderConfigsList();\n        } else {\n            toastr.info(\"重命名操作已取消。\");\n        }\n    }\n\n    async function updateConfig(configId) {\n        try {\n            let configs = await getStoredConfigs();\n            const oldConfig = configs[configId];\n            if (!oldConfig) {\n                toastr.error(`配置不存在，无法更新。`);\n                return;\n            }\n    \n            const loadedPresetName = TavernHelper.getLoadedPresetName();\n            const preset = TavernHelper.getPreset('in_use');\n            const allPrompts = [...preset.prompts, ...preset.prompts_unused];\n            const currentPromptStates = allPrompts.map(p => ({ id: p.id, enabled: p.enabled, name: p.name }));\n            \n            const configToSave = { \n                ...oldConfig,\n                presetName: loadedPresetName, \n                states: currentPromptStates\n            };\n            \n            const updateRegexChoice = await triggerSlash(`/popup okButton=\"是\" cancelButton=\"否\" result=true \"是否要同时更新此配置的正则开关状态？\"`);\n            if (updateRegexChoice === '1') {\n                const allRegexes = await TavernHelper.getTavernRegexes({ scope: 'global' });\n                const newRegexStates = allRegexes.map(regex => ({ id: regex.id, enabled: regex.enabled }));\n                configToSave.regexStates = newRegexStates;\n                toastr.info(\"已同步更新正则状态。\");\n            }\n    \n            const oldStateIds = new Set(oldConfig.states.map(s => s.id));\n            const newEntries = configToSave.states.filter(s => !oldStateIds.has(s.id));\n    \n            if (newEntries.length > 0) {\n                const promptIdToNameMap = new Map(currentPromptStates.map(p => [p.id, p.name]));\n                const userChoices = await showNewEntriesPopup(newEntries, promptIdToNameMap);\n                \n                if (userChoices !== null) {\n                    const choicesMap = new Map(userChoices.map(choice => [choice.id, choice.enabled]));\n                    configToSave.states.forEach(state => {\n                        if (choicesMap.has(state.id)) state.enabled = choicesMap.get(state.id);\n                    });\n                } else {\n                    toastr.info('已为新条目保留默认状态。');\n                }\n            }\n            \n            configs[configId] = configToSave;\n            await setStoredConfigs(configs);\n    \n            toastr.success(`配置 \\\"${configToSave.name}\\\" 已更新。`);\n            await renderConfigsList();\n        } catch (error) {\n            console.error('更新预设配置失败:', error);\n            toastr.error('更新预设配置失败，请检查控制台获取更多信息。');\n        }\n    }\n\n    async function saveCurrentConfig() {\n        const loadedPresetName = TavernHelper.getLoadedPresetName();\n        const blacklist = ['恶灵低语', 'deepspay', 'spaymale', '深阉', '小骡之神', '小猫之神', 'kemini'];\n        if (blacklist.some(keyword => loadedPresetName.toLowerCase().includes(keyword))) {\n            toastr.warning('*你使用了作者黑名单的预设哦（盯）*');\n            return;\n        }\n        \n        const nameInput = $('#preset-manager-name-input');\n        const configName = nameInput.val().trim();\n        if (!configName) {\n            toastr.error('请输入配置名称。');\n            return;\n        }\n\n        try {\n            const preset = TavernHelper.getPreset('in_use');\n            const allPrompts = [...preset.prompts, ...preset.prompts_unused];\n            const promptStates = allPrompts.map(p => ({ id: p.id, enabled: p.enabled, name: p.name }));\n            const configToSave = { \n                id: generateUniqueId(),\n                name: configName,\n                presetName: loadedPresetName, \n                states: promptStates \n            };\n\n            if ($('#preset-manager-bind-char').is(':checked')) {\n                const charData = await TavernHelper.getCharData('current');\n                if (charData && charData.avatar) {\n                    configToSave.boundCharAvatar = charData.avatar;\n                    configToSave.boundCharName = charData.name;\n                } else {\n                    toastr.warning('无法获取当前角色信息，配置未绑定。');\n                }\n            }\n            \n            const configs = await getStoredConfigs();\n            configs[configToSave.id] = configToSave;\n            await setStoredConfigs(configs);\n\n            toastr.success(`配置 \\\"${configName}\\\" 已保存。`);\n            nameInput.val('');\n            $('#preset-manager-bind-char').prop('checked', false);\n            await renderConfigsList();\n        } catch (error) {\n            console.error('保存预设配置失败:', error);\n            toastr.error('保存预设配置失败，请检查控制台获取更多信息。');\n        }\n    }\n\n    async function loadConfig(configId, shouldToggleUI = true) {\n        try {\n            const configs = await getStoredConfigs();\n            const configToLoad = configs[configId];\n            if (!configToLoad) {\n                toastr.error(`配置不存在。`);\n                return;\n            }\n\n            if (configToLoad.presetName) {\n                if (TavernHelper.getPresetNames().includes(configToLoad.presetName)) {\n                    if (TavernHelper.loadPreset(configToLoad.presetName)) {\n                        toastr.info(`已切换到预设 \\\"${configToLoad.presetName}\\\"。`);\n                        await new Promise(resolve => setTimeout(resolve, 150));\n                    } else {\n                        toastr.error(`加载预设 \\\"${configToLoad.presetName}\\\" 失败。`);\n                        return;\n                    }\n                } else {\n                    toastr.warning(`配置关联的预设 \\\"${configToLoad.presetName}\\\" 不存在。将仅对当前预设应用条目状态。`);\n                }\n            }\n\n            const promptStates = configToLoad.states;\n            if (!promptStates || !Array.isArray(promptStates)) {\n                toastr.error(`配置 \\\"${configToLoad.name}\\\" 数据格式不正确或为空。`);\n                return;\n            }\n\n            const statesMap = new Map(promptStates.map(s => [s.id, s.enabled]));\n            await TavernHelper.updatePresetWith('in_use', preset => {\n                [...preset.prompts, ...preset.prompts_unused].forEach(prompt => {\n                    if (statesMap.has(prompt.id)) prompt.enabled = statesMap.get(prompt.id);\n                });\n                return preset;\n            });\n\n            if (configToLoad.regexStates && Array.isArray(configToLoad.regexStates)) {\n                const statesToApply = new Map(configToLoad.regexStates.map(r => [r.id, r.enabled]));\n                if (statesToApply.size > 0) {\n                    await TavernHelper.updateTavernRegexesWith(regexes => {\n                        regexes.forEach(regex => {\n                            if (regex.scope === 'global' && statesToApply.has(regex.id)) {\n                                regex.enabled = statesToApply.get(regex.id);\n                            }\n                        });\n                        return regexes;\n                    }, { scope: 'global' });\n                    toastr.success(`已应用配置 \\\"${configToLoad.name}\\\" 绑定的全局正则。`);\n                }\n            }\n\n            toastr.success(`已加载配置 \\\"${configToLoad.name}\\\"。`);\n            if (shouldToggleUI) toggleUI();\n        } catch (error) {\n            console.error('加载预设配置失败:', error);\n            toastr.error('加载预设配置失败，请检查控制台获取更多信息。');\n        }\n    }\n\n    async function exportConfig(configId) {\n        try {\n            const configs = await getStoredConfigs();\n            const configData = configs[configId];\n    \n            if (!configData) {\n                toastr.error(`配置不存在，无法导出。`);\n                return;\n            }\n            const configName = configData.name;\n    \n            let userRemark = '';\n            const addRemarkChoice = await triggerSlash(`/popup okButton=\"是\" cancelButton=\"否\" result=true \"是否要为此导出添加备注信息？\"`);\n            if (addRemarkChoice === '1') {\n                userRemark = await triggerSlash(`/input multiline=true placeholder=\"请输入备注，例如预设用途、来源等...\" \"添加备注\"`);\n            }\n\n            let exportBundle = {\n                type: \"MiaoMiaoPresetBundle\",\n                version: 1,\n                remark: userRemark || '',\n                presetConfig: configData,\n                presetData: null,\n                regexData: null,\n            };\n\n            const presetName = configData.presetName;\n            if (presetName && TavernHelper.getPresetNames().includes(presetName)) {\n                const includePresetChoice = await triggerSlash(`/popup okButton=\"是\" cancelButton=\"否\" result=true \"此配置关联了预设 \\\"${presetName}\\\"。是否要将预设文件本身一起打包导出？\"`);\n                if (includePresetChoice === '1') {\n                    const presetData = TavernHelper.getPreset(presetName);\n                    if (presetData) {\n                        presetData.name = presetName; \n                        exportBundle.presetData = presetData;\n                        toastr.info(`已将预设 \\\"${presetName}\\\" 打包。`);\n                    } else {\n                        toastr.warning(`无法获取预设 \\\"${presetName}\\\" 的数据。`);\n                    }\n                }\n            }\n    \n            if (configData.regexStates && configData.regexStates.length > 0) {\n                const userChoice = await triggerSlash(`/popup okButton=\\\"是\\\" cancelButton=\\\"否\\\" result=true \\\"此配置绑定了正则。是否选择要一起导出的正则？\\\"`);\n                if (userChoice === '1') {\n                    const boundRegexIds = new Set(configData.regexStates.map(r => r.id));\n                    const allGlobalRegexes = await TavernHelper.getTavernRegexes({ scope: 'global' });\n                    const boundRegexes = allGlobalRegexes.filter(r => boundRegexIds.has(r.id));\n                    \n                    const selectedRegexes = await showRegexExportSelectionPopup(boundRegexes);\n\n                    if (selectedRegexes) {\n                        exportBundle.regexData = selectedRegexes;\n                        toastr.info(`已将 ${selectedRegexes.length} 条正则打包导出。`);\n                    } else {\n                        toastr.info('已取消导出正则。');\n                    }\n                }\n            }\n            \n            const defaultFileName = `${configName}_bundle`;\n            let userFileName = await triggerSlash(`/input default=\\\"${defaultFileName}\\\" \\\"请输入导出的文件名（无需后缀）\\\"`);\n\n            if (!userFileName || userFileName.trim() === '') {\n                userFileName = defaultFileName;\n                toastr.info(\"文件名为空，已使用默认名称。\");\n            }\n            userFileName = userFileName.trim().replace(/\\.json$/, '');\n\n            const jsonString = JSON.stringify(exportBundle, null, 2);\n            const blob = new Blob([jsonString], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n    \n            const a = document.createElement('a');\n            a.style.display = 'none'; \n            a.href = url;\n            a.download = `${userFileName}.json`;\n            \n            document.body.appendChild(a);\n            a.click();\n            \n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n    \n            toastr.success(`配置包 \\\"${configName}\\\" 已导出。`);\n        } catch (error) {\n            console.error('导出配置失败:', error);\n            toastr.error('导出配置失败，请检查控制台获取更多信息。');\n        }\n    }\n    \n    async function handleFileImport(event) {\n        const file = event.target.files[0];\n        if (!file) return;\n    \n        const reader = new FileReader();\n        reader.onload = async (e) => {\n            try {\n                const content = e.target.result;\n                const parsedContent = JSON.parse(content);\n\n                if (parsedContent.entries && typeof parsedContent.entries === 'object') {\n                    toastr.info(\"检测到世界书备份文件。\");\n                    const configsToImport = [];\n                    for (const entry of Object.values(parsedContent.entries)) {\n                        if(entry.content) {\n                            try {\n                                const config = JSON.parse(entry.content);\n                                if (config.id && config.name && Array.isArray(config.states)) {\n                                    configsToImport.push(config);\n                                }\n                            } catch (err) {}\n                        }\n                    }\n                    if (configsToImport.length > 0) {\n                        await startBatchImportFlow(configsToImport);\n                    } else {\n                        toastr.warning(\"世界书文件中未找到有效的喵喵配置数据。\");\n                    }\n                    return;\n                }\n    \n                if (parsedContent.remark) {\n                    await showRemarkPopup(parsedContent.remark);\n                }\n\n                if (parsedContent.type === \"MiaoMiaoPresetMegaBundle\") {\n                    await handleMegaBundleImport(parsedContent);\n                    return;\n                }\n\n                let configToImport, presetToImport, regexToImport;\n    \n                if (parsedContent.type === \"MiaoMiaoPresetBundle\") {\n                    toastr.info(\"检测到整合包文件。\");\n                    configToImport = parsedContent.presetConfig;\n                    presetToImport = parsedContent.presetData;\n                    regexToImport = parsedContent.regexData;\n                } else {\n                    configToImport = parsedContent;\n                }\n\n                if (!configToImport || typeof configToImport.presetName !== 'string' || !Array.isArray(configToImport.states)) {\n                    toastr.error('导入失败：配置数据格式不正确。');\n                    return;\n                }\n\n                if (presetToImport) {\n                    const importPresetChoice = await triggerSlash(`/popup okButton=\\\"是\\\" cancelButton=\\\"否\\\" result=true \\\"此文件包含预设文件 \\\\\\\"${presetToImport.name}\\\\\\\"。是否导入/覆盖？\\\"`);\n                    if (importPresetChoice === '1') {\n                        await TavernHelper.createOrReplacePreset(presetToImport.name, presetToImport);\n                        toastr.success(`预设文件 \\\"${presetToImport.name}\\\" 已导入。`);\n                    }\n                }\n    \n                if (regexToImport && regexToImport.length > 0) {\n                    await importRegexLogic(regexToImport);\n                }\n    \n                const initialName = (configToImport.name || file.name.replace(/_bundle\\.json$/i, '').replace(/\\.json$/i, ''));\n                let configName = await triggerSlash(`/input default=\\\"${initialName}\\\" \\\"请输入导入配置的名称\\\"`);\n                configName = configName.trim();\n                if (!configName) {\n                    toastr.info('导入已取消。');\n                    return;\n                }\n    \n                const configs = await getStoredConfigs();\n                configToImport.name = configName;\n                configToImport.id = generateUniqueId(); // Always generate new ID for single import\n                configs[configToImport.id] = configToImport;\n                await setStoredConfigs(configs);\n    \n                toastr.success(`配置 \\\"${configName}\\\" 已成功导入。`);\n                await renderConfigsList();\n            } catch (error) {\n                console.error('导入文件失败:', error);\n                toastr.error('导入文件失败，请检查控制台获取更多信息。');\n            } finally {\n                $(event.target).val('');\n            }\n        };\n        reader.readAsText(file);\n    }\n\n    async function deleteConfig(configId) {\n        try {\n            let configs = await getStoredConfigs();\n            const configToDelete = configs[configId];\n            if (configToDelete) {\n                delete configs[configId];\n                await setStoredConfigs(configs);\n                toastr.success(`已删除配置 \\\"${configToDelete.name}\\\"。`);\n                await renderConfigsList();\n            } else {\n                toastr.warning(`配置不存在。`);\n            }\n        } catch (error) {\n            console.error('删除配置失败:', error);\n            toastr.error('删除配置失败，请检查控制台获取更多信息。');\n        }\n    }\n\n    // --- 辅助弹窗函数 ---\n\n    function showHelpPopup() {\n        const popupId = 'preset-manager-help-popup';\n        $(`#${popupId}`).remove();\n\n        const helpContent = `\n            <div style=\"padding: 0 10px; font-size: 14px; line-height: 1.6;\">\n                <h5>主要功能</h5>\n                <ul>\n                    <li><b>保存/更新配置:</b> 保存或更新当前预设中所有“条目”的启用/禁用状态。更新时可选择是否同步正则状态。</li>\n                    <li><b>加载配置:</b> 一键切换到指定的预设并将所有“条目”恢复到已保存的状态。</li>\n                    <li><b>导入/导出:</b> 以 .json 文件的形式分享单个配置。导出时可以为配置包添加备注，方便分享和识别。整合包可以附带预设本身和绑定的正则。</li>\n                    <li><b>兼容世界书导入:</b> 支持直接导入通过酒馆世界书功能导出的、含有本插件数据的备份文件。</li>\n                    <li><b>批量导入/导出:</b> 一次性分享多个配置、关联的预设和正则脚本，方便备份和迁移。</li>\n                    <li><b>批量删除:</b> 在主界面勾选多个配置进行一次性删除，方便清理。</li>\n                    <li><b>角色绑定:</b> 将配置与特定角色关联，切换到该角色时会自动提示加载。</li>\n                    <li><b>正则绑定:</b> 将配置与一组全局正则的开关状态关联，加载配置时会自动应用。</li>\n                    <li><b>重命名与分组:</b> 您可以重命名任何配置，同名预设的配置会自动折叠在一个分组下，使界面更清晰。</li>\n                </ul>\n            </div>\n        `;\n\n        const usageNotice = `\n            <div style=\"padding: 12px; font-size: 14px; line-height: 1.6; background-color: #f9f3ea; border-radius: 8px; margin-top: 15px;\">\n                <h5 style=\"color: #c62828; margin-top:0;\">使用须知</h5>\n                <p style=\"font-weight: bold; margin-bottom: 0;\">\n                    本脚本免费在旅程、喵喵电波服务器发布，作者MoM小n，不允许某个虐男char预设与该作者另一个梦女预设使用，也不支持鉴抄MoM那位的预设使用。\n                </p>\n            </div>\n        `;\n\n        const popupHtml = `\n            <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10002; display: flex; align-items: center; justify-content: center;\">\n                <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 500px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                    <h4 style=\"margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px; flex-shrink: 0;\">喵喵预设配置管理 - 使用说明</h4>\n                    <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin: 15px 0;\">\n                        ${helpContent}\n                    </div>\n                    ${usageNotice}\n                    <div style=\"text-align: right; margin-top: 15px; flex-shrink: 0;\">\n                        <button id=\"help-popup-close\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">关闭</button>\n                    </div>\n                </div>\n            </div>\n        `;\n        $('body').append(popupHtml);\n        const mobileStyles = `<style>@media (max-width: 600px) { #${popupId} { align-items: flex-start !important; } #${popupId} > div { margin-top: 10vh; max-height: 75vh !important; } }</style>`;\n        $(`#${popupId}`).append(mobileStyles);\n        $('#help-popup-close').on('click', () => $(`#${popupId}`).remove());\n    }\n\n    function showRemarkPopup(remarkText) {\n        return new Promise(resolve => {\n            const popupId = 'preset-manager-remark-popup';\n            $(`#${popupId}`).remove();\n\n            // Simple Markdown to HTML converter\n            function convertMarkdown(text) {\n                const sanitize = (s) => $('<div/>').text(s).html();\n                let lines = text.split('\\n');\n                let html = '';\n                let inList = false;\n\n                const processInline = (line) => {\n                    return sanitize(line)\n                        .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n                        .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n                        .replace(/`(.*?)`/g, '<code>$1</code>');\n                };\n\n                for (const line of lines) {\n                    const trimmedLine = line.trim();\n                    const isList = trimmedLine.startsWith('* ') || trimmedLine.startsWith('- ');\n\n                    if (inList && !isList && trimmedLine) {\n                        html += '</ul>';\n                        inList = false;\n                    }\n\n                    if (trimmedLine.startsWith('# ')) {\n                        html += `<h1>${processInline(trimmedLine.substring(2))}</h1>`;\n                    } else if (trimmedLine.startsWith('## ')) {\n                        html += `<h2>${processInline(trimmedLine.substring(3))}</h2>`;\n                    } else if (trimmedLine.startsWith('### ')) {\n                        html += `<h3>${processInline(trimmedLine.substring(4))}</h3>`;\n                    } else if (isList) {\n                        if (!inList) {\n                            html += '<ul>';\n                            inList = true;\n                        }\n                        html += `<li>${processInline(trimmedLine.substring(2))}</li>`;\n                    } else if (trimmedLine) {\n                        html += `<p>${processInline(line)}</p>`;\n                    }\n                }\n                if (inList) html += '</ul>';\n                return html;\n            }\n\n            const contentHtml = convertMarkdown(remarkText);\n\n            const popupHtml = `\n                <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10002; display: flex; align-items: center; justify-content: center;\">\n                    <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 600px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                        <style>\n                            #${popupId} .remark-content h1, #${popupId} .remark-content h2, #${popupId} .remark-content h3 { margin: 12px 0 6px 0; padding-bottom: 6px; border-bottom: 1px solid #e0c9a6; }\n                            #${popupId} .remark-content h1 { font-size: 1.4em; color: #6a4226; }\n                            #${popupId} .remark-content h2 { font-size: 1.2em; color: #7a5235; }\n                            #${popupId} .remark-content h3 { font-size: 1.1em; color: #7a5235; }\n                            #${popupId} .remark-content p { margin: 0 0 10px 0; }\n                            #${popupId} .remark-content ul { margin: 10px 0; padding-left: 25px; }\n                            #${popupId} .remark-content li { margin-bottom: 5px; }\n                            #${popupId} .remark-content code { background-color: #e0d8cd; padding: 2px 5px; border-radius: 4px; font-family: monospace; color: #3a2c2c; font-size: 0.9em; }\n                        </style>\n                        <h4 style=\"margin-top:0; color:#6a4226; text-align: center; border-bottom: 2px solid #f0d8b6; padding-bottom: 10px;\">导入备注</h4>\n                        <div class=\"remark-content\" style=\"flex: 1; min-height: 200px; overflow-y: auto; margin: 15px 0; background-color: #fdfaf5; border: 1px solid #f0e2d0; border-radius: 8px; padding: 15px; line-height: 1.6; word-wrap: break-word;\">\n                            ${contentHtml}\n                        </div>\n                        <div style=\"text-align: right;\">\n                            <button id=\"remark-popup-continue\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">继续导入</button>\n                        </div>\n                    </div>\n                </div>\n            `;\n\n            $('body').append(popupHtml);\n            const mobileStyles = `<style>@media (max-width: 600px) { #${popupId} { align-items: flex-start !important; } #${popupId} > div { margin-top: 5vh; max-height: 85vh !important; } }</style>`;\n            $(`#${popupId}`).append(mobileStyles);\n\n            $('#remark-popup-continue').on('click', () => {\n                $(`#${popupId}`).remove();\n                resolve(true);\n            });\n        });\n    }\n\n    // --- 正则处理函数 ---\n\n    function showRegexDeletionPopup(existingRegexes) {\n        return new Promise(resolve => {\n            const popupId = 'preset-manager-regex-delete-popup';\n            $(`#${popupId}`).remove();\n\n            const regexesHtml = existingRegexes.map(regex => {\n                const safeName = $('<div/>').text(regex.script_name).html();\n                return `\n                    <div style=\"display: flex; align-items: center; padding: 10px 5px; border-bottom: 1px solid #eee;\">\n                        <input type=\"checkbox\" class=\"regex-delete-checkbox\" id=\"regex-delete-toggle-${regex.id}\" data-id=\"${regex.id}\" style=\"margin-right: 15px; transform: scale(1.3);\">\n                        <label for=\"regex-delete-toggle-${regex.id}\" style=\"cursor: pointer; flex: 1; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\" title=\"${safeName}\">${safeName}</label>\n                    </div>\n                `;\n            }).join('');\n\n            const popupHtml = `\n                <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10002; display: flex; align-items: center; justify-content: center;\">\n                    <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 450px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                        <h4 style=\"margin-top:0; color:#c62828; text-align: center;\">删除已有正则 (可选)</h4>\n                        <p style=\"font-size: 13px; color: #777; text-align: center; margin-bottom: 15px;\">在导入新正则前，你可以选择删除一些不再需要的旧正则。</p>\n                        <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 20px; border-top: 1px solid #f0e2d0; border-bottom: 1px solid #f0e2d0; padding: 5px 10px;\">\n                            ${regexesHtml}\n                        </div>\n                        <div style=\"text-align: right; display:flex; justify-content:flex-end; gap: 10px;\">\n                            <button id=\"regex-delete-skip\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333;\">跳过并导入</button>\n                            <button id=\"regex-delete-confirm\" style=\"padding: 8px 16px; background-color:#f5a8a0; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff;\">删除选中并导入</button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            $('body').append(popupHtml);\n            \n            const mobileStyles = `<style>@media (max-width: 600px) { #${popupId} { align-items: flex-start !important; } #${popupId} > div { margin-top: 5vh; } }</style>`;\n            $(`#${popupId}`).append(mobileStyles);\n\n            $('#regex-delete-skip').on('click', () => {\n                $(`#${popupId}`).remove();\n                resolve(existingRegexes);\n            });\n\n            $('#regex-delete-confirm').on('click', () => {\n                const idsToDelete = new Set();\n                $('.regex-delete-checkbox:checked').each(function() {\n                    idsToDelete.add($(this).data('id'));\n                });\n                \n                const remainingRegexes = existingRegexes.filter(r => !idsToDelete.has(r.id));\n                if (idsToDelete.size > 0) {\n                    toastr.info(`已删除 ${idsToDelete.size} 条旧正则。`);\n                }\n                $(`#${popupId}`).remove();\n                resolve(remainingRegexes);\n            });\n        });\n    }\n\n    function sortRegexes(regexes) {\n        const getSortNumber = (name) => {\n            const match = name.trim().match(/^(?:\\[|【|\\(|（)?(\\d+)(?:\\]|】|\\)|）|\\.|-|_|\\s)?/);\n            if (match && match[1]) {\n                return parseInt(match[1], 10);\n            }\n            return Infinity;\n        };\n\n        return regexes.sort((a, b) => {\n            const numA = getSortNumber(a.script_name);\n            const numB = getSortNumber(b.script_name);\n            \n            if (numA !== numB) {\n                return numA - numB;\n            }\n            return a.script_name.localeCompare(b.script_name);\n        });\n    }\n\n    async function importRegexLogic(regexToImport) {\n        let currentRegexes = await TavernHelper.getTavernRegexes({ scope: 'global' });\n        let remainingRegexes = currentRegexes;\n\n        if (currentRegexes && currentRegexes.length > 0) {\n            remainingRegexes = await showRegexDeletionPopup(currentRegexes);\n        }\n\n        const combinedRegexes = [...regexToImport, ...remainingRegexes];\n        const sortedRegexes = sortRegexes(combinedRegexes);\n\n        await TavernHelper.replaceTavernRegexes(sortedRegexes, { scope: 'global' });\n        toastr.success(`成功导入 ${regexToImport.length} 条正则，并重新排序。`);\n    }\n\n    // --- 批量导出与导入功能 ---\n\n    async function showBatchExportPopup() {\n        const popupId = 'preset-manager-batch-export-popup';\n        $(`#${popupId}`).remove();\n\n        const configs = Object.values(await getStoredConfigs());\n\n        if (configs.length === 0) {\n            toastr.info('没有可导出的配置。');\n            return;\n        }\n\n        const configsHtml = configs.map(config => {\n            const safeName = $('<div/>').text(config.name).html();\n            return `\n                <div style=\"padding: 8px 5px; border-bottom: 1px solid #eee; display: flex; align-items: center;\">\n                    <label style=\"cursor:pointer; display:flex; align-items:center; width: 100%;\">\n                        <input type=\"checkbox\" class=\"pm-batch-export-item\" value=\"${config.id}\" style=\"margin-right: 10px; transform: scale(1.2);\">\n                        <span>${safeName}</span>\n                    </label>\n                </div>\n            `;\n        }).join('');\n\n        const popupHtml = `\n            <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;\">\n                <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 450px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                    <h4 style=\"margin-top:0; color:#6a4226; text-align: center;\">选择要批量导出的配置</h4>\n                    <div style=\"margin: 10px 0; display: flex; justify-content: space-around;\">\n                       <button id=\"batch-export-select-all\" style=\"padding: 6px 12px; background-color:#a5d6f9; border:none; border-radius:6px; cursor:pointer;\">全选</button>\n                       <button id=\"batch-export-deselect-all\" style=\"padding: 6px 12px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer;\">全不选</button>\n                    </div>\n                    <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 20px; border-top: 1px solid #f0e2d0; border-bottom: 1px solid #f0e2d0; padding: 5px 10px;\">\n                        ${configsHtml}\n                    </div>\n                    <div style=\"text-align: right; display:flex; justify-content:flex-end; gap: 10px;\">\n                        <button id=\"batch-export-cancel\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333;\">取消</button>\n                        <button id=\"batch-export-confirm\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">确认导出</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        $('body').append(popupHtml);\n        \n        const mobileStyles = `<style>\\n            @media (max-width: 600px) { #${popupId} > div { margin-top: 5vh; } }\\n        </style>`;\n        $(`#${popupId}`).append(mobileStyles);\n\n        $('#batch-export-select-all').on('click', () => $('.pm-batch-export-item').prop('checked', true));\n        $('#batch-export-deselect-all').on('click', () => $('.pm-batch-export-item').prop('checked', false));\n        $('#batch-export-cancel').on('click', () => $(`#${popupId}`).remove());\n        $('#batch-export-confirm').on('click', async () => {\n            const selectedIds = new Set();\n            $('.pm-batch-export-item:checked').each(function() {\n                selectedIds.add($(this).val());\n            });\n            const allConfigs = await getStoredConfigs();\n            const selectedConfigs = Object.values(allConfigs).filter(c => selectedIds.has(c.id));\n            batchExportConfigs(selectedConfigs);\n            $(`#${popupId}`).remove();\n        });\n    }\n    \n    async function batchExportConfigs(selectedConfigs) {\n        if (selectedConfigs.length === 0) {\n            toastr.info('未选择任何配置。');\n            return;\n        }\n\n        try {\n            let userRemark = '';\n            const addRemarkChoice = await triggerSlash(`/popup okButton=\"是\" cancelButton=\"否\" result=true \"是否要为这个批量导出的整合包添加备注信息？\"`);\n            if (addRemarkChoice === '1') {\n                userRemark = await triggerSlash(`/input multiline=true placeholder=\"请输入备注，例如这批配置的共同特点...\" \"为整合包添加备注\"`);\n            }\n\n            const megaBundle = {\n                type: \"MiaoMiaoPresetMegaBundle\",\n                version: 1,\n                remark: userRemark || '',\n                presetConfigs: {},\n                presets: {},\n                regexData: []\n            };\n\n            const uniquePresetNames = new Set();\n\n            for (const configData of selectedConfigs) {\n                megaBundle.presetConfigs[configData.id] = configData;\n                if (configData.presetName) {\n                    uniquePresetNames.add(configData.presetName);\n                }\n            }\n\n            if (uniquePresetNames.size > 0) {\n                const presetList = Array.from(uniquePresetNames).join(', ');\n                const includePresetsChoice = await triggerSlash(`/popup okButton=\"是\" cancelButton=\"否\" result=true \"您选择的配置关联了以下预设：${presetList}。是否要将这些预设文件一同打包导出？\"`);\n                if (includePresetsChoice === '1') {\n                    let includedCount = 0;\n                    for (const presetName of uniquePresetNames) {\n                        if (TavernHelper.getPresetNames().includes(presetName)) {\n                            const presetData = TavernHelper.getPreset(presetName);\n                            if (presetData) {\n                                megaBundle.presets[presetName] = presetData;\n                                includedCount++;\n                            }\n                        }\n                    }\n                    toastr.info(`已将 ${includedCount} 个预设文件打包。`);\n                } else {\n                    toastr.info('跳过预设文件导出。');\n                }\n            }\n            \n            const includeRegexChoice = await triggerSlash(`/popup okButton=\\\"是\\\" cancelButton=\\\"否\\\" result=true \"是否需要选择一些全局正则脚本一同打包导出？\"`);\n            if (includeRegexChoice === '1') {\n                const allGlobalRegexes = await TavernHelper.getTavernRegexes({ scope: 'global' });\n                if (allGlobalRegexes.length === 0) {\n                    toastr.info(\"没有可供导出的全局正则脚本。\");\n                } else {\n                    const selectedRegexes = await showRegexExportSelectionPopup(allGlobalRegexes);\n                    if (selectedRegexes) {\n                        megaBundle.regexData = selectedRegexes;\n                        toastr.info(`已将 ${selectedRegexes.length} 条正则打包。`);\n                    } else {\n                        toastr.info('已取消选择正则，将不导出任何正则脚本。');\n                    }\n                }\n            } else {\n                toastr.info('跳过正则导出。');\n            }\n\n            const defaultFileName = 'MiaoMiao_Batch_Export';\n            let userFileName = await triggerSlash(`/input default=\\\"${defaultFileName}\\\" \\\"请输入批量导出的文件名（无需后缀）\\\"`);\n\n            if (!userFileName || userFileName.trim() === '') {\n                userFileName = defaultFileName;\n                toastr.info(\"文件名为空，已使用默认名称。\");\n            }\n            userFileName = userFileName.trim().replace(/\\.json$/, '');\n\n            const jsonString = JSON.stringify(megaBundle, null, 2);\n            const blob = new Blob([jsonString], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n    \n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `${userFileName}.json`;\n            document.body.appendChild(a);\n            a.click();\n            URL.revokeObjectURL(url);\n            a.remove();\n    \n            toastr.success(`已成功导出 ${selectedConfigs.length} 个配置的整合包。`);\n\n        } catch (error) {\n            console.error('批量导出失败:', error);\n            toastr.error('批量导出失败，请检查控制台。');\n        }\n    }\n\n    async function startBatchImportFlow(configsToImport) {\n        const userChoices = await showBatchImportConfigSelectionPopup(configsToImport);\n\n        if (!userChoices) {\n            toastr.info('配置导入已取消。');\n            return;\n        }\n\n        const importList = userChoices.filter(choice => choice.import);\n        if (importList.length === 0) {\n            toastr.info('未选择要导入的配置。');\n            return;\n        }\n\n        const storedConfigs = await getStoredConfigs();\n        importList.forEach(choice => {\n            let config = configsToImport.find(c => c.id === choice.originalId);\n            if (config) {\n                let newConfig = { ...config }; // Create a copy\n                newConfig.name = choice.newName;\n                newConfig.id = generateUniqueId(); // Assign a new unique ID on import\n                storedConfigs[newConfig.id] = newConfig;\n            }\n        });\n\n        await setStoredConfigs(storedConfigs);\n        toastr.success(`成功导入 ${importList.length} 个配置。`);\n        await renderConfigsList();\n    }\n\n    async function handleMegaBundleImport(megaBundle) {\n        // 1. 导入预设\n        const presetsToImport = megaBundle.presets;\n        if (presetsToImport && Object.keys(presetsToImport).length > 0) {\n            const presetNames = Object.keys(presetsToImport).join(', ');\n            const importPresetChoice = await triggerSlash(`/popup okButton=\"是\" cancelButton=\"否\" result=true \"此文件包含预设: ${presetNames}。是否全部导入/覆盖？\"`);\n            if (importPresetChoice === '1') {\n                for (const presetName in presetsToImport) {\n                    await TavernHelper.createOrReplacePreset(presetName, presetsToImport[presetName]);\n                }\n                toastr.success(`已导入 ${Object.keys(presetsToImport).length} 个预设。`);\n            }\n        }\n\n        // 2. 导入正则\n        const regexToImport = megaBundle.regexData;\n        if (regexToImport && regexToImport.length > 0) {\n            const importRegexChoice = await triggerSlash(`/popup okButton=\"是\" cancelButton=\"否\" result=true \"此文件包含 ${regexToImport.length} 条正则脚本。是否导入？\"`);\n            if (importRegexChoice === '1') {\n                await importRegexLogic(regexToImport);\n            }\n        }\n\n        // 3. 导入配置\n        const configsToImport = Object.values(megaBundle.presetConfigs);\n        await startBatchImportFlow(configsToImport);\n    }\n    \n    function showBatchImportConfigSelectionPopup(configsToImport) {\n        return new Promise(resolve => {\n            const popupId = 'preset-manager-batch-import-popup';\n            $(`#${popupId}`).remove();\n\n            const configsHtml = configsToImport.map(config => {\n                const safeName = $('<div/>').text(config.name).html();\n                return `\n                    <div style=\"padding: 8px 5px; border-bottom: 1px solid #eee; display: flex; align-items: center; gap: 10px;\">\n                        <input type=\"checkbox\" class=\"pm-batch-import-checkbox\" data-original-id=\"${config.id}\" checked style=\"transform: scale(1.2);\">\n                        <label style=\"font-weight: bold; flex-shrink: 0;\" title=\"${safeName}\">${safeName}</label>\n                        <input type=\"text\" class=\"pm-batch-import-newname\" value=\"${safeName}\" style=\"flex: 1; min-width: 100px; background-color: #fff; border: 1px solid #d4b58b; color:#3a2c2c; padding: 4px 6px; border-radius: 4px; font-size:13px;\">\n                    </div>\n                `;\n            }).join('');\n\n            const popupHtml = `\n                 <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;\">\n                    <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 500px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                        <h4 style=\"margin-top:0; color:#6a4226; text-align: center;\">选择要导入的配置</h4>\n                        <p style=\"font-size: 13px; color: #777; text-align: center; margin-bottom: 15px;\">勾选要导入的配置，可修改导入后的名称。</p>\n                        <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 20px; border-top: 1px solid #f0e2d0; border-bottom: 1px solid #f0e2d0; padding: 5px 10px;\">\n                            ${configsHtml}\n                        </div>\n                        <div style=\"text-align: right; display:flex; justify-content:flex-end; gap: 10px;\">\n                            <button id=\"batch-import-cancel\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333;\">取消</button>\n                            <button id=\"batch-import-confirm\" style=\"padding: 8px 16px; background-color:#f4c78e; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#3a2c2c;\">导入选中项</button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            $('body').append(popupHtml);\n            \n            const mobileStyles = `<style>\\n                @media (max-width: 600px) { #${popupId} > div { margin-top: 600px; } }\\n            </style>`;\n            $(`#${popupId}`).append(mobileStyles);\n\n            $('#batch-import-cancel').on('click', () => {\n                $(`#${popupId}`).remove();\n                resolve(null);\n            });\n\n            $('#batch-import-confirm').on('click', () => {\n                const choices = [];\n                let hasError = false;\n                $('#preset-manager-batch-import-popup .pm-batch-import-checkbox').each(function() {\n                    const checkbox = $(this);\n                    const newName = checkbox.siblings('.pm-batch-import-newname').val().trim();\n                    if (!newName && checkbox.is(':checked')) {\n                       toastr.error(`有已勾选的配置新名称为空。`);\n                       hasError = true;\n                       return false;\n                    }\n                    choices.push({\n                        originalId: checkbox.data('original-id'),\n                        newName: newName,\n                        import: checkbox.is(':checked')\n                    });\n                });\n\n                if(!hasError) {\n                   $(`#${popupId}`).remove();\n                   resolve(choices);\n                }\n            });\n        });\n    }\n\n    // --- 批量删除功能 ---\n    async function showBatchDeletePopup() {\n        const popupId = 'preset-manager-batch-delete-popup';\n        $(`#${popupId}`).remove();\n\n        const configs = Object.values(await getStoredConfigs());\n        if (configs.length === 0) {\n            toastr.info('没有可删除的配置。');\n            return;\n        }\n\n        const configsHtml = configs.map(config => {\n            const safeName = $('<div/>').text(config.name).html();\n            return `\n                <div style=\"padding: 8px 5px; border-bottom: 1px solid #eee; display: flex; align-items: center;\">\n                    <label style=\"cursor:pointer; display:flex; align-items:center; width: 100%;\">\n                        <input type=\"checkbox\" class=\"pm-batch-delete-item\" value=\"${config.id}\" style=\"margin-right: 10px; transform: scale(1.2);\">\n                        <span title=\\\"${safeName}\\\">${safeName}</span>\n                    </label>\n                </div>\n            `;\n        }).join('');\n\n        const popupHtml = `\n            <div id=\"${popupId}\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;\">\n                <div style=\"background-color: #fff8f0; color: #3a2c2c; border-radius: 16px; padding: 20px; width: 90%; max-width: 450px; box-shadow: 0 4px 25px rgba(120,90,60,.25); display: flex; flex-direction: column; max-height: 80vh;\">\n                    <h4 style=\"margin-top:0; color:#c62828; text-align: center;\">选择要批量删除的配置</h4>\n                    <div style=\"margin: 10px 0; display: flex; justify-content: space-around;\">\n                       <button id=\"batch-delete-select-all\" style=\"padding: 6px 12px; background-color:#a5d6f9; border:none; border-radius:6px; cursor:pointer;\">全选</button>\n                       <button id=\"batch-delete-deselect-all\" style=\"padding: 6px 12px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer;\">全不选</button>\n                    </div>\n                    <div style=\"flex: 1; min-height: 0; overflow-y: auto; margin-bottom: 20px; border-top: 1px solid #f0e2d0; border-bottom: 1px solid #f0e2d0; padding: 5px 10px;\">\n                        ${configsHtml}\n                    </div>\n                    <div style=\"text-align: right; display:flex; justify-content:flex-end; gap: 10px;\">\n                        <button id=\"batch-delete-cancel\" style=\"padding: 8px 16px; background-color:#e0e0e0; border:none; border-radius:6px; cursor:pointer; color:#333;\">取消</button>\n                        <button id=\"batch-delete-confirm\" style=\"padding: 8px 16px; background-color:#f44336; border:none; border-radius:6px; cursor:pointer; font-weight:bold; color:#fff;\">确认删除</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        $('body').append(popupHtml);\n        const mobileStyles = `<style>@media (max-width: 600px) { #${popupId} { align-items: flex-start !important; } #${popupId} > div { margin-top: 200px; } }</style>`;\n        $(`#${popupId}`).append(mobileStyles);\n\n        $('#batch-delete-select-all').on('click', () => $('.pm-batch-delete-item').prop('checked', true));\n        $('#batch-delete-deselect-all').on('click', () => $('.pm-batch-delete-item').prop('checked', false));\n        $('#batch-delete-cancel').on('click', () => $(`#${popupId}`).remove());\n        $('#batch-delete-confirm').on('click', () => {\n            const selectedIds = [];\n            $('.pm-batch-delete-item:checked').each(function() {\n                selectedIds.push($(this).val());\n            });\n            batchDeleteConfigs(selectedIds);\n            $(`#${popupId}`).remove();\n        });\n    }\n\n    async function batchDeleteConfigs(configIds) {\n        if (configIds.length === 0) {\n            toastr.info('未选择任何要删除的配置。');\n            return;\n        }\n\n        const confirm = await triggerSlash(`/popup okButton=\\\"确认删除\\\" cancelButton=\\\"取消\\\" result=true \\\"警告：您确定要删除选中的 ${configIds.length} 个配置吗？此操作无法撤销。\\\"`);\n        if (confirm !== '1') {\n            toastr.info('批量删除操作已取消。');\n            return;\n        }\n\n        try {\n            const storedConfigs = await getStoredConfigs();\n            const idsToDelete = new Set(configIds);\n            Object.keys(storedConfigs).forEach(id => {\n                if(idsToDelete.has(id)) delete storedConfigs[id];\n            });\n            await setStoredConfigs(storedConfigs);\n            toastr.success(`已成功删除 ${configIds.length} 个配置。`);\n            await renderConfigsList();\n        } catch (error) {\n            console.error('批量删除失败:', error);\n            toastr.error('批量删除失败，请检查控制台。');\n        }\n    }\n    \n    async function ensureConfigLorebookExists() {\n        try {\n            await TavernHelper.getWorldbook(CONFIG_LOREBOOK_NAME);\n        } catch (error) {\n            console.log(`'${CONFIG_LOREBOOK_NAME}' not found. Creating it now.`);\n            await TavernHelper.createOrReplaceWorldbook(CONFIG_LOREBOOK_NAME, []);\n        }\n    }\n\n    async function onChatChanged() {\n        try {\n            await new Promise(resolve => setTimeout(resolve, 250));\n            const charData = await TavernHelper.getCharData('current');\n    \n            if (!charData || !charData.avatar || charData.avatar === lastProcessedCharAvatar) {\n                if (!charData || !charData.avatar) lastProcessedCharAvatar = null;\n                return;\n            }\n    \n            lastProcessedCharAvatar = charData.avatar;\n    \n            const configs = await getStoredConfigs();\n            const boundConfigs = Object.values(configs).filter(config => config.boundCharAvatar === charData.avatar);\n    \n            if (boundConfigs.length === 0) return;\n    \n            let configIdToLoad = null;\n    \n            if (boundConfigs.length === 1) {\n                const singleConfig = boundConfigs[0];\n                const popupText = `角色 \\\"${charData.name}\\\" 拥有绑定的配置 \\\"${singleConfig.name}\\\"。是否要加载此配置？`;\n                const userChoice = await triggerSlash(`/popup okButton=\\\"加载\\\" cancelButton=\\\"取消\\\" result=true \\\"${popupText}\\\"`);\n                if (userChoice === '1') configIdToLoad = singleConfig.id;\n            } else {\n                configIdToLoad = await showConfigSelectionPopup(boundConfigs, charData.name);\n            }\n    \n            if (configIdToLoad) await loadConfig(configIdToLoad, false);\n        } catch (error) {\n            console.error(\"检查绑定配置时出错:\", error);\n            toastr.error(\"检查角色绑定配置时出错。\");\n        }\n    }\n\n    async function init() {\n        await ensureConfigLorebookExists();\n        createUI();\n        eventOn(getButtonEvent(TOGGLE_BUTTON_NAME), toggleUI);\n        eventOn(tavern_events.CHAT_CHANGED, onChatChanged);\n\n        $(document).on('click', function(e) {\n            if (!$(e.target).is('button[name=\"more-actions\"]') && $(e.target).closest('.pm-submenu').length === 0) {\n                $('.pm-submenu').hide();\n            }\n        });\n    }\n\n    function checkReady() {\n        if (window.jQuery && window.TavernHelper && typeof TavernHelper.createOrReplaceWorldbook === 'function' && window.tavern_events && typeof getButtonEvent === 'function') {\n            init();\n        } else {\n            setTimeout(checkReady, 150);\n        }\n    }\n\n    checkReady();\n\n})();",
  "info": "",
  "buttons": [
    {
      "name": "喵喵预设配置管理",
      "visible": true
    }
  ],
  "data": {}
}